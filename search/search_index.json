{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Notes","title":"Preface"},{"location":"#notes","text":"","title":"Notes"},{"location":"color/","text":"Primary colors Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Color"},{"location":"color/#primary-colors","text":"Default: Teal Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"color/#accent-colors","text":"Default: Blue Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"1/1.1/","text":"1. \u57fa\u672c\u5185\u7f6e\u7c7b\u578b \u57fa\u672c\u7c7b\u578b\uff1a bool, char, short, int, long, long long, float, double, long double \u6269\u5c55\u7c7b\u578b\uff1a wchar_t \uff1a \u5bbd\u5b57\u7b26\uff0c 16bit \uff0c char \u4fdd\u8bc1\u53ef\u4ee5\u5b58\u653e\u673a\u5668\u57fa\u672c\u5b57\u7b26\u96c6\u7684\u5b57\u7b26\uff0c wchar_t \u4fdd\u8bc1\u53ef\u4ee5\u5b58\u653e\u673a\u5668\u6700\u5927\u6269\u5c55\u5b57\u7b26\u96c6\u4e2d\u7684\u5b57\u7b26\u3002 char16_t\u3001char32_t \uff1a\u5206\u522b\u4e3a 16bit\u300132bit \uff0c\u4e3a Unicode \u5b57\u7b26\u96c6\u670d\u52a1\u3002 \u7c7b\u578b\u4f7f\u7528\u5efa\u8bae\uff1a \u660e\u786e\u6570\u503c\u4e0d\u4e3a\u8d1f\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u7c7b\u578b\uff1b \u7b97\u672f\u8868\u8fbe\u5f0f\u4e0d\u8981\u4f7f\u7528 char \u548c bool \uff0c\u53ea\u5728\u5b58\u653e\u503c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002\u56e0\u4e3a char \u662f\u5426\u6709\u7b26\u53f7\u89c6\u673a\u5668\u800c\u5b9a\uff0c\u5982\u679c\u9700\u8981\u5c0f\u6574\u6570\u8fd0\u7b97\uff0c\u5219\u6700\u597d\u6307\u660e signed char/unsigned char \uff1b \u6d6e\u70b9\u6570\u8fd0\u7b97\u4f7f\u7528 double \uff0c float \u53ef\u80fd\u5927\u5c0f\u4e0d\u591f\u4e14\u901f\u5ea6\u66f4\u6162\u3002 2. \u7c7b\u578b\u8f6c\u6362 \u6ce8\u610f\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 1 2 3 unsigned i1 = 10 ; int i2 = - 42 ; std :: cout << i1 + i2 << std :: endl ; // 4294967264 3. \u5b57\u9762\u503c ( literal ) \u6574\u6570\uff1a 1 20 /* dec */ 024 /* oct */ 0x14 /* hex */ \u5341\u8fdb\u5236\u5b57\u9762\u503c\u7c7b\u578b\u662f int\u3001long\u3001long long \u4e2d\u80fd\u5bb9\u7eb3\u4e14\u5c3a\u5bf8\u6700\u5c0f\u7684\u90a3\u4e2a\uff1b \u516b\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u662f int\u3001uint\u3001long\u3001ulong\u3001longlong\u3001ulonglong \u4e2d\u80fd\u5bb9\u7eb3\u4e14\u5c3a\u5bf8\u6700\u5c0f\u7684\u90a3\u4e2a\uff1b \u4e25\u683c\u6765\u8bf4\uff0c\u5341\u8fdb\u5236\u5b57\u9762\u91cf\u4e0d\u4e3a\u8d1f\uff0c\u8d1f\u503c\u7684\u5f62\u5f0f\u7684\u542b\u4e49\u662f\u5bf9\u5b57\u9762\u91cf\u505a\u8d1f\u8fd0\u7b97\u3002 \u6d6e\u70b9\uff1a 3.14159 3.14159E0 0. 0e0 .001 \u2003\u6d6e\u70b9\u5b57\u9762\u503c\u7684\u9ed8\u8ba4\u7c7b\u578b\u4e3a double \u3002 \u5b57\u7b26\uff1a 1 2 3 4 'a' // char literal \"Hello World\" // string literal char * s = \"my life is \" \"a long way.\" \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4ec5\u7531 \u7a7a\u683c/\u7f29\u8fdb/\u6362\u884c\u7b26 \u5206\u9694\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u6574\u4f53\u3002 \u6307\u5b9a\u5b57\u9762\u91cf\u7684\u7c7b\u578b\uff1a 1 2 3 4 5 L 'a' // wchar_t u8 \"hi!\" // utf-8 string literal 42ULL // unsigned long long 1E-3 F // float 3.14 L // long double","title":"1.primitive type"},{"location":"1/1.1/#1","text":"\u57fa\u672c\u7c7b\u578b\uff1a bool, char, short, int, long, long long, float, double, long double \u6269\u5c55\u7c7b\u578b\uff1a wchar_t \uff1a \u5bbd\u5b57\u7b26\uff0c 16bit \uff0c char \u4fdd\u8bc1\u53ef\u4ee5\u5b58\u653e\u673a\u5668\u57fa\u672c\u5b57\u7b26\u96c6\u7684\u5b57\u7b26\uff0c wchar_t \u4fdd\u8bc1\u53ef\u4ee5\u5b58\u653e\u673a\u5668\u6700\u5927\u6269\u5c55\u5b57\u7b26\u96c6\u4e2d\u7684\u5b57\u7b26\u3002 char16_t\u3001char32_t \uff1a\u5206\u522b\u4e3a 16bit\u300132bit \uff0c\u4e3a Unicode \u5b57\u7b26\u96c6\u670d\u52a1\u3002 \u7c7b\u578b\u4f7f\u7528\u5efa\u8bae\uff1a \u660e\u786e\u6570\u503c\u4e0d\u4e3a\u8d1f\uff0c\u4f7f\u7528\u65e0\u7b26\u53f7\u7c7b\u578b\uff1b \u7b97\u672f\u8868\u8fbe\u5f0f\u4e0d\u8981\u4f7f\u7528 char \u548c bool \uff0c\u53ea\u5728\u5b58\u653e\u503c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002\u56e0\u4e3a char \u662f\u5426\u6709\u7b26\u53f7\u89c6\u673a\u5668\u800c\u5b9a\uff0c\u5982\u679c\u9700\u8981\u5c0f\u6574\u6570\u8fd0\u7b97\uff0c\u5219\u6700\u597d\u6307\u660e signed char/unsigned char \uff1b \u6d6e\u70b9\u6570\u8fd0\u7b97\u4f7f\u7528 double \uff0c float \u53ef\u80fd\u5927\u5c0f\u4e0d\u591f\u4e14\u901f\u5ea6\u66f4\u6162\u3002","title":"1. \u57fa\u672c\u5185\u7f6e\u7c7b\u578b"},{"location":"1/1.1/#2","text":"\u6ce8\u610f\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 1 2 3 unsigned i1 = 10 ; int i2 = - 42 ; std :: cout << i1 + i2 << std :: endl ; // 4294967264","title":"2. \u7c7b\u578b\u8f6c\u6362"},{"location":"1/1.1/#3-literal","text":"\u6574\u6570\uff1a 1 20 /* dec */ 024 /* oct */ 0x14 /* hex */ \u5341\u8fdb\u5236\u5b57\u9762\u503c\u7c7b\u578b\u662f int\u3001long\u3001long long \u4e2d\u80fd\u5bb9\u7eb3\u4e14\u5c3a\u5bf8\u6700\u5c0f\u7684\u90a3\u4e2a\uff1b \u516b\u8fdb\u5236\u548c\u5341\u516d\u8fdb\u5236\u662f int\u3001uint\u3001long\u3001ulong\u3001longlong\u3001ulonglong \u4e2d\u80fd\u5bb9\u7eb3\u4e14\u5c3a\u5bf8\u6700\u5c0f\u7684\u90a3\u4e2a\uff1b \u4e25\u683c\u6765\u8bf4\uff0c\u5341\u8fdb\u5236\u5b57\u9762\u91cf\u4e0d\u4e3a\u8d1f\uff0c\u8d1f\u503c\u7684\u5f62\u5f0f\u7684\u542b\u4e49\u662f\u5bf9\u5b57\u9762\u91cf\u505a\u8d1f\u8fd0\u7b97\u3002 \u6d6e\u70b9\uff1a 3.14159 3.14159E0 0. 0e0 .001 \u2003\u6d6e\u70b9\u5b57\u9762\u503c\u7684\u9ed8\u8ba4\u7c7b\u578b\u4e3a double \u3002 \u5b57\u7b26\uff1a 1 2 3 4 'a' // char literal \"Hello World\" // string literal char * s = \"my life is \" \"a long way.\" \u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4ec5\u7531 \u7a7a\u683c/\u7f29\u8fdb/\u6362\u884c\u7b26 \u5206\u9694\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u6574\u4f53\u3002 \u6307\u5b9a\u5b57\u9762\u91cf\u7684\u7c7b\u578b\uff1a 1 2 3 4 5 L 'a' // wchar_t u8 \"hi!\" // utf-8 string literal 42ULL // unsigned long long 1E-3 F // float 3.14 L // long double","title":"3. \u5b57\u9762\u503c (literal)"},{"location":"1/1.2/","text":"1. \u53d8\u91cf\u521d\u59cb\u5316 \u5728 C++ \u4e2d\uff0c\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\uff0c\u521d\u59cb\u5316\u548c\u8d4b\u503c\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4f46\u5728\u5f88\u591a\u5176\u4ed6\u7684\u8bed\u8a00\u4e2d\u4e8c\u8005\u7684\u533a\u522b\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002 \u521d\u59cb\u5316\uff1a\u521b\u5efa\u53d8\u91cf\u65f6\u8d4b\u4e88\u4e00\u4e2a\u521d\u59cb\u503c\uff1b \u8d4b\u503c\uff1a\u628a\u5bf9\u8c61\u7684\u5f53\u524d\u503c\u64e6\u9664\uff0c\u5e76\u4ee5\u65b0\u503c\u66ff\u4ee3\u3002 (1). \u5217\u8868\u521d\u59cb\u5316 \uff08 list initialization ) \u53ef\u901a\u8fc7\u4ee5\u4e0b\u56db\u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\uff1a 1 2 3 4 int temp = 0 ; int temp = { 0 }; int temp { 0 }; int temp ( 0 ); \u901a\u8fc7\u82b1\u62ec\u53f7\u521d\u59cb\u5316\u5373\u5217\u8868\u521d\u59cb\u5316\uff0c\u662f C++ 11 \u7684\u65b0\u7279\u6027\u3002\u5176\u91cd\u8981\u7279\u70b9\uff1a\u5f53\u521d\u59cb\u503c\u5b58\u5728\u4e22\u5931\u7684\u98ce\u9669\uff0c\u7f16\u8bd1\u5668\u4f1a\u8b66\u544a\u3002 1 2 3 long double id = 3.1415926536 ; int a { id }, b = { id }; // warning int c ( id ), d = id ; // correct (2). \u9ed8\u8ba4\u521d\u59cb\u5316 \u5b9a\u4e49\u5728\u51fd\u6570\u4f53\u5916\u7684\u53d8\u91cf\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u51fd\u6570\u4f53\u5185\u90e8\u7684\u5185\u7f6e\u7c7b\u578b\u5982\u679c\u8fdd\u80cc\u521d\u59cb\u5316\uff0c\u5176\u503c\u5982\u679c\u88ab\u8bbf\u95ee\u5c06\u4f1a\u51fa\u9519\u3002 2. \u590d\u5408\u7c7b\u578b \u2003\u590d\u5408\u7c7b\u578b ( compound type ) \u662f\u6307\u57fa\u4e8e\u5176\u4ed6\u7c7b\u578b\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5b9e\u73b0\u5bf9\u5176\u4ed6\u7c7b\u578b\u7684\u95f4\u63a5\u8bbf\u95ee\u3002 C++ \u4e2d\u6709\u591a\u79cd\u590d\u5408\u7c7b\u578b\u3002\u5728\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u6307\u9488\u548c\u5de6\u503c\u5f15\u7528\u3002 \u2003 <<C++ Primer>> \u5bf9 \u5bf9\u8c61 \u7684\u5b9a\u4e49\uff1a\u5bf9\u8c61\u662f\u6307\u4e00\u5757\u80fd\u5b58\u50a8\u6570\u636e\u5e76\u5177\u6709\u67d0\u79cd\u7c7b\u578b\u7684\u5185\u5b58\u7a7a\u95f4\u3002 (1). \u6307\u9488 \u5373\u901a\u8fc7 & \u53d6\u5f15\u7528\uff0c\u901a\u8fc7 * \u89e3\u5f15\u7528\u4ee5\u8bbf\u95ee\u539f\u5bf9\u8c61\u7684\u503c\u3002\u5176\u4e2d void* \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\u7c7b\u578b\uff0c\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u5bf9\u8c61\u7684\u5730\u5740\u3002\u4ece void* \u7684\u89c6\u89d2\u6765\u770b\uff0c\u5185\u5b58\u7a7a\u95f4\u4ec5\u4ec5\u662f\u5185\u5b58\u7a7a\u95f4\uff0c\u65e0\u6cd5\u8bbf\u95ee\u5176\u4e2d\u7684\u5bf9\u8c61\u3002 \u5728 C++ \u4e2d\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u751f\u6210\u7a7a\u6307\u9488\u7684\u65b9\u5f0f\uff1a 1 2 3 int * p1 = nullptr ; int * p2 = 0 ; int * p3 = NULL ; \u2003\u5728 C \u8bed\u8a00\u4e2d\uff0c NULL \u88ab\u5b9a\u4e49\u4e3a #define NULL ((void*)0) \uff0c\u4f46\u5728 C++ \u7684 cstdlib \u4e2d\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a #define NULL 0 \u3002\u539f\u56e0\u5728\u4e8e\uff0c C++ \u662f\u5f3a\u7c7b\u578b\u7684\uff0c\u4e0d\u5141\u8bb8 C \u8bed\u8a00\u4e2d void* \u6307\u9488\u7684\u9690\u5f0f\u8f6c\u6362\u3002 \u2003 nullptr \u662f C++ 11 \u5f15\u5165\u7684\u65b0\u7279\u6027\uff0c\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u5b83\u521d\u59cb\u5316\u7a7a\u6307\u9488\u800c\u975e 0\uff0c nullptr \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a\u4efb\u610f\u7684\u6307\u9488\u7c7b\u578b\uff0c\u800c 0 \u65e2\u662f\u6570\u5b57\u53c8\u53ef\u4ee5\u662f\u6307\u9488\uff0c\u5728\u51fd\u6570\u91cd\u8f7d\u65f6\u53ef\u80fd\u4f1a\u9020\u6210\u6b67\u4e49\u3002 (2). \u5f15\u7528 \u5f15\u7528\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff1a \u5f15\u7528\u5fc5\u987b\u88ab\u521d\u59cb\u5316\uff0c\u5373\u4e0e\u4e00\u4e2a\u5bf9\u8c61\u7ed1\u5b9a\uff0c\u76f8\u5f53\u4e8e\u5bf9\u8c61\u7684\u4e00\u4e2a\u522b\u540d\uff0c\u7ed1\u5b9a\u5173\u7cfb\u4e0d\u53ef\u4fee\u6539\uff1b\u5f15\u7528\u53ea\u80fd\u4e0e\u5bf9\u8c61\u7ed1\u5b9a\uff0c\u4e0d\u80fd\u662f\u5b57\u9762\u503c\u6216\u8868\u8fbe\u5f0f\uff1b \u5bf9\u5f15\u7528\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff0c\u76f8\u5f53\u4e8e\u5bf9\u539f\u5bf9\u8c61\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff1b \u5f15\u7528\u672c\u8eab\u4e0d\u662f\u5bf9\u8c61\uff0c\u4e0d\u80fd\u751f\u6210\u5f15\u7528\u7684\u5f15\u7528\u3002 \u5f15\u7528\u53ef\u4ee5\u7406\u89e3\u4e3a\u901a\u8fc7\u6307\u9488\u5e38\u91cf\u5b9e\u73b0\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\u3002 \u6307\u9488\u7684\u5f15\u7528\uff1a 1 2 3 4 5 int i = 1024 ; int * p ; int *& r = p ; r = & i ; // the type of r is determined by the nearest operator to r 3. const \u9650\u5b9a\u7b26 \u5373\u9650\u5b9a\u4e00\u4e2a\u53d8\u91cf\u521d\u59cb\u5316\u540e\u4e0d\u53ef\u88ab\u6539\u53d8\u3002\u5982\uff1a const int BufSize = 512 ; \u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u628a\u6240\u6709\u7528\u5230 BufSize \u7684\u5730\u65b9\u90fd\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u9700\u8981\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528\uff0c\u5219\u9700\u8981\u5728 const \u524d\u52a0 extern \u3002 (1). const \u5f15\u7528 \u2003 const \u5f15\u7528\u5e38\u7b80\u79f0\u4e3a\u201c\u5e38\u91cf\u5f15\u7528\u201d\uff0c\u6307\u628a\u5f15\u7528\u7ed1\u5b9a\u5728 const \u5bf9\u8c61\u4e0a\u3002 1 2 const int c = 1024 ; const int & c1 = c ; \u2003 const \u5f15\u7528\u4e5f\u53ef\u80fd\u7ed1\u5b9a\u4e00\u4e2a\u975e const \u7684\u5bf9\u8c61\uff0c\u539f\u5bf9\u8c61\u7684\u503c\u4e0d\u53ef\u901a\u8fc7\u6b64\u5f15\u7528\u4fee\u6539\u3002\u4f46\u975e const \u7684\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u4e00\u4e2a const \u5bf9\u8c61\u3002 \u2003\u7531\u4e8e\u4e00\u822c\u7684\u5f15\u7528\u53ef\u4ee5\u5bf9\u539f\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\u5f15\u7528\u7684\u7c7b\u578b\u8981\u4e0e\u539f\u5bf9\u8c61\u4e00\u81f4\u4e14\u4e0d\u80fd\u7ed1\u5b9a\u5b57\u9762\u91cf\u548c\u8868\u8fbe\u5f0f\uff0c const \u5f15\u7528\u65e0\u9700\u6b64\u9650\u5236\u3002 1 2 3 4 5 6 7 // case1 int i = 42 ; const int & i1 = 42 ; const int & i2 = r1 * 2 ; // case2 double val = 3.14 ; const int & v1 = val ; \u5728\u60c5\u51b5 2 \u4e2d\uff0c\u7f16\u8bd1\u5668\u4e3a\u4e86\u8ba9 v1 \u7ed1\u5b9a\u4e00\u4e2a\u6574\u6570\u5bf9\u8c61\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u4e34\u65f6\u91cf\uff1a 1 2 const int temp = val ; const int & v1 = temp ; (2). const \u4e0e\u6307\u9488 \u2003 * \u5728 const \u4e4b\u540e\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\uff0c\u4ece\u53f3\u5411\u5de6\u89e3\u8bfb\uff0c const \u9650\u5b9a\u7684\u90e8\u5206\u4e3a\u201c\u89e3\u5f15\u7528\u201d\uff0c\u5373\u65e0\u6cd5\u901a\u8fc7\u6307\u9488\u4fee\u6539\u539f\u5bf9\u8c61\u7684\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c const \u5bf9\u8c61\u53ea\u80fd\u88ab const \u7684\u6307\u9488\u6307\u5411\u3002 1 2 3 4 5 6 const int i = 1024 ; const int * i1 = & i ; // <==> int const *i1 = &i; int * i2 = & i ; // ERROR int j = 1024 ; const int * j1 = & j ; \u2003 * \u5728 const \u4e4b\u524d\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u4ece\u53f3\u5411\u5de6\u89e3\u8bfb\uff0c\u6b64\u65f6 const \u9650\u5b9a\u7684\u90e8\u5206\u4e3a\u8fd9\u4e2a\u53d8\u91cf\uff0c\u5373\u6307\u9488\u7684\u503c\u4e0d\u53ef\u53d8\uff0c\u4f46\u6307\u9488\u53ef\u4ee5\u6307\u5411\u5e38\u91cf\u6216\u975e\u5e38\u91cf\u3002 1 2 3 4 int i = 1024 ; int * const i1 = & i ; const int * const comb = & i ; (3). \u9876\u5c42 const \u2003\u9876\u5c42 const ( top-level const ) \u8868\u793a\u6307\u9488\u672c\u8eab\u662f\u5e38\u91cf\u6216\u67d0\u4e2a\u5bf9\u8c61\u662f\u5e38\u91cf\uff0c\u800c\u5e95\u5c42 const ( low-level const ) \u8868\u793a\u6307\u9488\u6240\u6307\u7684\u5bf9\u8c61\u662f\u5e38\u91cf\u3002\u6240\u6709\u7684 const \u5f15\u7528\u90fd\u662f\u5e95\u5c42 const \u3002 1 2 3 4 5 6 int i = 0 ; int * const p1 = & i ; // top-level const int c = 42 ; // top-level const int * p2 = & c ; // low-level const int * const p3 = p2 ; // top + low const int & r = i ; // low-level \u6267\u884c\u5bf9\u8c61\u7684\u62f7\u8d1d\u64cd\u4f5c\u65f6\uff0c\u9876\u5c42 const \u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u5e95\u5c42 const \u9700\u8981\u8003\u8651\u8f6c\u6362\u3002\u4e00\u822c\u7684\u5224\u65ad\u65b9\u6cd5\u662f\uff0c(\u5bf9\u4e8e\u5e95\u5c42 const ) \u5e38\u91cf\u4e0d\u80fd\u8f6c\u6362\u4e3a\u975e\u5e38\u91cf\u3002 1 2 3 4 5 6 int * px = p1 ; int * py = p3 ; // ERROR p2 = p3 ; p2 = & i ; // non-const to const int & r1 = c ; // ERROR const int & r2 = i ; p3 \u65e2\u662f\u9876\u5c42 const \u53c8\u662f\u5e95\u5c42 const \uff0c\u62f7\u8d1d\u65f6\u53ea\u9700\u8003\u8651\u5e95\u5c42 const \u7684\u6027\u8d28\u3002 (4). \u5e38\u91cf\u8868\u8fbe\u5f0f \u2003\u5e38\u91cf\u8868\u8fbe\u5f0f ( const expression ) \u662f\u6307\u4e4b\u4e0d\u4f1a\u6539\u53d8\u5e76\u4e14\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u5f97\u5230\u7ed3\u679c\u7684\u8868\u8fbe\u5f0f\u3002\u5b57\u9762\u91cf\u3001\u7528\u5e38\u91cf\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u7684 const \u5bf9\u8c61\u90fd\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 1 2 3 const int max_files = 20 ; // const exp const int limit = max_files + 1 ; // const exp const int size = get_size (); // non-const exp \u2003\u5728\u4e00\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\uff0c\u5e38\u91cf\u8868\u8fbe\u5f0f\u65f6\u96be\u4ee5\u5206\u8fa8\u7684\u3002 C++11 \u89c4\u5b9a\uff0c\u5141\u8bb8\u5c06\u53d8\u91cf\u58f0\u660e\u4e3a constexpr \uff0c\u4e3a\u53d8\u91cf\u589e\u52a0 const \u5c5e\u6027\uff0c\u5e76\u8ba9\u7f16\u8bd1\u5668\u9a8c\u8bc1\u662f\u5426\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 \u2003 constexpr \u9650\u5236\u53ef\u58f0\u660e\u7684\u7c7b\u578b\u4e3a\u5b57\u9762\u503c\u7c7b\u578b ( literal type )\uff0c\u5305\u62ec\u7b97\u672f\u7c7b\u578b\u3001\u6307\u9488\u548c\u5f15\u7528\uff0c\u4e0d\u5305\u62ec\u81ea\u5b9a\u4e49\u7c7b\u548c string \u7c7b\u7b49\u3002 \u2003\u5bf9\u4e8e\u901a\u8fc7\u51fd\u6570\u521d\u59cb\u5316\u7684 const \u53d8\u91cf\uff0c\u5982\u679c\u51fd\u6570\u662f\u4e00\u4e2a constexpr \u51fd\u6570 (\u51fd\u6570\u7684\u5f62\u53c2\u548c\u8fd4\u56de\u503c\u90fd\u662f\u5b57\u9762\u503c\u7c7b\u578b\uff0c\u4e14\u51fd\u6570\u7684 return \u8bed\u53e5\u53ea\u6709\u4e00\u4e2a)\uff0c\u5e76\u4e14\u51fd\u6570\u7684\u5b9e\u53c2\u90fd\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5219\u76f8\u5e94\u7684\u53d8\u91cf\u4e5f\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 1 2 3 4 5 6 7 8 9 constexpr int scale ( int arg ) { return arg * 2 ; } int main () { constexpr int val1 = scale ( 1 ); int i = 100 ; constexpr int val2 = scale ( i ); // ERROR } \u5bf9\u4e8e\u6307\u9488\u6765\u8bf4\uff0c\u9700\u8981\u6ce8\u610f\uff1a \u51fd\u6570\u4f53\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u822c\u6765\u8bf4\u653e\u5728\u975e\u56fa\u5b9a\u5730\u5740\u4e2d\uff0c constexpr \u6307\u9488\u4e0d\u80fd\u6307\u5411\u8fd9\u6837\u7684\u53d8\u91cf\uff1b \u5728 constexpr \u58f0\u660e\u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6307\u9488\uff0c\u5219\u53ea\u662f\u751f\u6210\u4e86\u4e00\u4e2a\u9876\u5c42 const \uff0c\u5373\u5e38\u91cf\u6307\u9488\u3002 1 2 3 4 5 6 constexpr int i = 42 ; int j = 41 ; // i and j must be defined out of function constexpr const int * p1 = & i ; constexpr int * p1 = & j ; // ERROR: constexpr int *p1 = &i","title":"2.variable"},{"location":"1/1.2/#1","text":"\u5728 C++ \u4e2d\uff0c\u521d\u59cb\u5316\u662f\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\uff0c\u521d\u59cb\u5316\u548c\u8d4b\u503c\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4f46\u5728\u5f88\u591a\u5176\u4ed6\u7684\u8bed\u8a00\u4e2d\u4e8c\u8005\u7684\u533a\u522b\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\u3002 \u521d\u59cb\u5316\uff1a\u521b\u5efa\u53d8\u91cf\u65f6\u8d4b\u4e88\u4e00\u4e2a\u521d\u59cb\u503c\uff1b \u8d4b\u503c\uff1a\u628a\u5bf9\u8c61\u7684\u5f53\u524d\u503c\u64e6\u9664\uff0c\u5e76\u4ee5\u65b0\u503c\u66ff\u4ee3\u3002","title":"1. \u53d8\u91cf\u521d\u59cb\u5316"},{"location":"1/1.2/#1-list-initialization","text":"\u53ef\u901a\u8fc7\u4ee5\u4e0b\u56db\u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\uff1a 1 2 3 4 int temp = 0 ; int temp = { 0 }; int temp { 0 }; int temp ( 0 ); \u901a\u8fc7\u82b1\u62ec\u53f7\u521d\u59cb\u5316\u5373\u5217\u8868\u521d\u59cb\u5316\uff0c\u662f C++ 11 \u7684\u65b0\u7279\u6027\u3002\u5176\u91cd\u8981\u7279\u70b9\uff1a\u5f53\u521d\u59cb\u503c\u5b58\u5728\u4e22\u5931\u7684\u98ce\u9669\uff0c\u7f16\u8bd1\u5668\u4f1a\u8b66\u544a\u3002 1 2 3 long double id = 3.1415926536 ; int a { id }, b = { id }; // warning int c ( id ), d = id ; // correct","title":"(1). \u5217\u8868\u521d\u59cb\u5316 \uff08list initialization)"},{"location":"1/1.2/#2","text":"\u5b9a\u4e49\u5728\u51fd\u6570\u4f53\u5916\u7684\u53d8\u91cf\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u51fd\u6570\u4f53\u5185\u90e8\u7684\u5185\u7f6e\u7c7b\u578b\u5982\u679c\u8fdd\u80cc\u521d\u59cb\u5316\uff0c\u5176\u503c\u5982\u679c\u88ab\u8bbf\u95ee\u5c06\u4f1a\u51fa\u9519\u3002","title":"(2). \u9ed8\u8ba4\u521d\u59cb\u5316"},{"location":"1/1.2/#2_1","text":"\u590d\u5408\u7c7b\u578b ( compound type ) \u662f\u6307\u57fa\u4e8e\u5176\u4ed6\u7c7b\u578b\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5b9e\u73b0\u5bf9\u5176\u4ed6\u7c7b\u578b\u7684\u95f4\u63a5\u8bbf\u95ee\u3002 C++ \u4e2d\u6709\u591a\u79cd\u590d\u5408\u7c7b\u578b\u3002\u5728\u8fd9\u91cc\u53ea\u4ecb\u7ecd\u6307\u9488\u548c\u5de6\u503c\u5f15\u7528\u3002 \u2003 <<C++ Primer>> \u5bf9 \u5bf9\u8c61 \u7684\u5b9a\u4e49\uff1a\u5bf9\u8c61\u662f\u6307\u4e00\u5757\u80fd\u5b58\u50a8\u6570\u636e\u5e76\u5177\u6709\u67d0\u79cd\u7c7b\u578b\u7684\u5185\u5b58\u7a7a\u95f4\u3002","title":"2. \u590d\u5408\u7c7b\u578b"},{"location":"1/1.2/#1_1","text":"\u5373\u901a\u8fc7 & \u53d6\u5f15\u7528\uff0c\u901a\u8fc7 * \u89e3\u5f15\u7528\u4ee5\u8bbf\u95ee\u539f\u5bf9\u8c61\u7684\u503c\u3002\u5176\u4e2d void* \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\u7c7b\u578b\uff0c\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u5bf9\u8c61\u7684\u5730\u5740\u3002\u4ece void* \u7684\u89c6\u89d2\u6765\u770b\uff0c\u5185\u5b58\u7a7a\u95f4\u4ec5\u4ec5\u662f\u5185\u5b58\u7a7a\u95f4\uff0c\u65e0\u6cd5\u8bbf\u95ee\u5176\u4e2d\u7684\u5bf9\u8c61\u3002 \u5728 C++ \u4e2d\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u751f\u6210\u7a7a\u6307\u9488\u7684\u65b9\u5f0f\uff1a 1 2 3 int * p1 = nullptr ; int * p2 = 0 ; int * p3 = NULL ; \u2003\u5728 C \u8bed\u8a00\u4e2d\uff0c NULL \u88ab\u5b9a\u4e49\u4e3a #define NULL ((void*)0) \uff0c\u4f46\u5728 C++ \u7684 cstdlib \u4e2d\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a #define NULL 0 \u3002\u539f\u56e0\u5728\u4e8e\uff0c C++ \u662f\u5f3a\u7c7b\u578b\u7684\uff0c\u4e0d\u5141\u8bb8 C \u8bed\u8a00\u4e2d void* \u6307\u9488\u7684\u9690\u5f0f\u8f6c\u6362\u3002 \u2003 nullptr \u662f C++ 11 \u5f15\u5165\u7684\u65b0\u7279\u6027\uff0c\u5e94\u5c3d\u53ef\u80fd\u4f7f\u7528\u5b83\u521d\u59cb\u5316\u7a7a\u6307\u9488\u800c\u975e 0\uff0c nullptr \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a\u4efb\u610f\u7684\u6307\u9488\u7c7b\u578b\uff0c\u800c 0 \u65e2\u662f\u6570\u5b57\u53c8\u53ef\u4ee5\u662f\u6307\u9488\uff0c\u5728\u51fd\u6570\u91cd\u8f7d\u65f6\u53ef\u80fd\u4f1a\u9020\u6210\u6b67\u4e49\u3002","title":"(1). \u6307\u9488"},{"location":"1/1.2/#2_2","text":"\u5f15\u7528\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u6027\uff1a \u5f15\u7528\u5fc5\u987b\u88ab\u521d\u59cb\u5316\uff0c\u5373\u4e0e\u4e00\u4e2a\u5bf9\u8c61\u7ed1\u5b9a\uff0c\u76f8\u5f53\u4e8e\u5bf9\u8c61\u7684\u4e00\u4e2a\u522b\u540d\uff0c\u7ed1\u5b9a\u5173\u7cfb\u4e0d\u53ef\u4fee\u6539\uff1b\u5f15\u7528\u53ea\u80fd\u4e0e\u5bf9\u8c61\u7ed1\u5b9a\uff0c\u4e0d\u80fd\u662f\u5b57\u9762\u503c\u6216\u8868\u8fbe\u5f0f\uff1b \u5bf9\u5f15\u7528\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff0c\u76f8\u5f53\u4e8e\u5bf9\u539f\u5bf9\u8c61\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff1b \u5f15\u7528\u672c\u8eab\u4e0d\u662f\u5bf9\u8c61\uff0c\u4e0d\u80fd\u751f\u6210\u5f15\u7528\u7684\u5f15\u7528\u3002 \u5f15\u7528\u53ef\u4ee5\u7406\u89e3\u4e3a\u901a\u8fc7\u6307\u9488\u5e38\u91cf\u5b9e\u73b0\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\u3002 \u6307\u9488\u7684\u5f15\u7528\uff1a 1 2 3 4 5 int i = 1024 ; int * p ; int *& r = p ; r = & i ; // the type of r is determined by the nearest operator to r","title":"(2). \u5f15\u7528"},{"location":"1/1.2/#3-const","text":"\u5373\u9650\u5b9a\u4e00\u4e2a\u53d8\u91cf\u521d\u59cb\u5316\u540e\u4e0d\u53ef\u88ab\u6539\u53d8\u3002\u5982\uff1a const int BufSize = 512 ; \u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u628a\u6240\u6709\u7528\u5230 BufSize \u7684\u5730\u65b9\u90fd\u66ff\u6362\u4e3a\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u9700\u8981\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528\uff0c\u5219\u9700\u8981\u5728 const \u524d\u52a0 extern \u3002","title":"3. const \u9650\u5b9a\u7b26"},{"location":"1/1.2/#1-const","text":"const \u5f15\u7528\u5e38\u7b80\u79f0\u4e3a\u201c\u5e38\u91cf\u5f15\u7528\u201d\uff0c\u6307\u628a\u5f15\u7528\u7ed1\u5b9a\u5728 const \u5bf9\u8c61\u4e0a\u3002 1 2 const int c = 1024 ; const int & c1 = c ; \u2003 const \u5f15\u7528\u4e5f\u53ef\u80fd\u7ed1\u5b9a\u4e00\u4e2a\u975e const \u7684\u5bf9\u8c61\uff0c\u539f\u5bf9\u8c61\u7684\u503c\u4e0d\u53ef\u901a\u8fc7\u6b64\u5f15\u7528\u4fee\u6539\u3002\u4f46\u975e const \u7684\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u4e00\u4e2a const \u5bf9\u8c61\u3002 \u2003\u7531\u4e8e\u4e00\u822c\u7684\u5f15\u7528\u53ef\u4ee5\u5bf9\u539f\u5bf9\u8c61\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\u5f15\u7528\u7684\u7c7b\u578b\u8981\u4e0e\u539f\u5bf9\u8c61\u4e00\u81f4\u4e14\u4e0d\u80fd\u7ed1\u5b9a\u5b57\u9762\u91cf\u548c\u8868\u8fbe\u5f0f\uff0c const \u5f15\u7528\u65e0\u9700\u6b64\u9650\u5236\u3002 1 2 3 4 5 6 7 // case1 int i = 42 ; const int & i1 = 42 ; const int & i2 = r1 * 2 ; // case2 double val = 3.14 ; const int & v1 = val ; \u5728\u60c5\u51b5 2 \u4e2d\uff0c\u7f16\u8bd1\u5668\u4e3a\u4e86\u8ba9 v1 \u7ed1\u5b9a\u4e00\u4e2a\u6574\u6570\u5bf9\u8c61\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a\u4e34\u65f6\u91cf\uff1a 1 2 const int temp = val ; const int & v1 = temp ;","title":"(1). const \u5f15\u7528"},{"location":"1/1.2/#2-const","text":"* \u5728 const \u4e4b\u540e\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\uff0c\u4ece\u53f3\u5411\u5de6\u89e3\u8bfb\uff0c const \u9650\u5b9a\u7684\u90e8\u5206\u4e3a\u201c\u89e3\u5f15\u7528\u201d\uff0c\u5373\u65e0\u6cd5\u901a\u8fc7\u6307\u9488\u4fee\u6539\u539f\u5bf9\u8c61\u7684\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c const \u5bf9\u8c61\u53ea\u80fd\u88ab const \u7684\u6307\u9488\u6307\u5411\u3002 1 2 3 4 5 6 const int i = 1024 ; const int * i1 = & i ; // <==> int const *i1 = &i; int * i2 = & i ; // ERROR int j = 1024 ; const int * j1 = & j ; \u2003 * \u5728 const \u4e4b\u524d\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u4ece\u53f3\u5411\u5de6\u89e3\u8bfb\uff0c\u6b64\u65f6 const \u9650\u5b9a\u7684\u90e8\u5206\u4e3a\u8fd9\u4e2a\u53d8\u91cf\uff0c\u5373\u6307\u9488\u7684\u503c\u4e0d\u53ef\u53d8\uff0c\u4f46\u6307\u9488\u53ef\u4ee5\u6307\u5411\u5e38\u91cf\u6216\u975e\u5e38\u91cf\u3002 1 2 3 4 int i = 1024 ; int * const i1 = & i ; const int * const comb = & i ;","title":"(2). const \u4e0e\u6307\u9488"},{"location":"1/1.2/#3-const_1","text":"\u9876\u5c42 const ( top-level const ) \u8868\u793a\u6307\u9488\u672c\u8eab\u662f\u5e38\u91cf\u6216\u67d0\u4e2a\u5bf9\u8c61\u662f\u5e38\u91cf\uff0c\u800c\u5e95\u5c42 const ( low-level const ) \u8868\u793a\u6307\u9488\u6240\u6307\u7684\u5bf9\u8c61\u662f\u5e38\u91cf\u3002\u6240\u6709\u7684 const \u5f15\u7528\u90fd\u662f\u5e95\u5c42 const \u3002 1 2 3 4 5 6 int i = 0 ; int * const p1 = & i ; // top-level const int c = 42 ; // top-level const int * p2 = & c ; // low-level const int * const p3 = p2 ; // top + low const int & r = i ; // low-level \u6267\u884c\u5bf9\u8c61\u7684\u62f7\u8d1d\u64cd\u4f5c\u65f6\uff0c\u9876\u5c42 const \u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u5e95\u5c42 const \u9700\u8981\u8003\u8651\u8f6c\u6362\u3002\u4e00\u822c\u7684\u5224\u65ad\u65b9\u6cd5\u662f\uff0c(\u5bf9\u4e8e\u5e95\u5c42 const ) \u5e38\u91cf\u4e0d\u80fd\u8f6c\u6362\u4e3a\u975e\u5e38\u91cf\u3002 1 2 3 4 5 6 int * px = p1 ; int * py = p3 ; // ERROR p2 = p3 ; p2 = & i ; // non-const to const int & r1 = c ; // ERROR const int & r2 = i ; p3 \u65e2\u662f\u9876\u5c42 const \u53c8\u662f\u5e95\u5c42 const \uff0c\u62f7\u8d1d\u65f6\u53ea\u9700\u8003\u8651\u5e95\u5c42 const \u7684\u6027\u8d28\u3002","title":"(3). \u9876\u5c42 const"},{"location":"1/1.2/#4","text":"\u5e38\u91cf\u8868\u8fbe\u5f0f ( const expression ) \u662f\u6307\u4e4b\u4e0d\u4f1a\u6539\u53d8\u5e76\u4e14\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c31\u80fd\u5f97\u5230\u7ed3\u679c\u7684\u8868\u8fbe\u5f0f\u3002\u5b57\u9762\u91cf\u3001\u7528\u5e38\u91cf\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u7684 const \u5bf9\u8c61\u90fd\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 1 2 3 const int max_files = 20 ; // const exp const int limit = max_files + 1 ; // const exp const int size = get_size (); // non-const exp \u2003\u5728\u4e00\u4e2a\u590d\u6742\u7684\u7cfb\u7edf\u4e2d\uff0c\u5e38\u91cf\u8868\u8fbe\u5f0f\u65f6\u96be\u4ee5\u5206\u8fa8\u7684\u3002 C++11 \u89c4\u5b9a\uff0c\u5141\u8bb8\u5c06\u53d8\u91cf\u58f0\u660e\u4e3a constexpr \uff0c\u4e3a\u53d8\u91cf\u589e\u52a0 const \u5c5e\u6027\uff0c\u5e76\u8ba9\u7f16\u8bd1\u5668\u9a8c\u8bc1\u662f\u5426\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 \u2003 constexpr \u9650\u5236\u53ef\u58f0\u660e\u7684\u7c7b\u578b\u4e3a\u5b57\u9762\u503c\u7c7b\u578b ( literal type )\uff0c\u5305\u62ec\u7b97\u672f\u7c7b\u578b\u3001\u6307\u9488\u548c\u5f15\u7528\uff0c\u4e0d\u5305\u62ec\u81ea\u5b9a\u4e49\u7c7b\u548c string \u7c7b\u7b49\u3002 \u2003\u5bf9\u4e8e\u901a\u8fc7\u51fd\u6570\u521d\u59cb\u5316\u7684 const \u53d8\u91cf\uff0c\u5982\u679c\u51fd\u6570\u662f\u4e00\u4e2a constexpr \u51fd\u6570 (\u51fd\u6570\u7684\u5f62\u53c2\u548c\u8fd4\u56de\u503c\u90fd\u662f\u5b57\u9762\u503c\u7c7b\u578b\uff0c\u4e14\u51fd\u6570\u7684 return \u8bed\u53e5\u53ea\u6709\u4e00\u4e2a)\uff0c\u5e76\u4e14\u51fd\u6570\u7684\u5b9e\u53c2\u90fd\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u5219\u76f8\u5e94\u7684\u53d8\u91cf\u4e5f\u662f\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 1 2 3 4 5 6 7 8 9 constexpr int scale ( int arg ) { return arg * 2 ; } int main () { constexpr int val1 = scale ( 1 ); int i = 100 ; constexpr int val2 = scale ( i ); // ERROR } \u5bf9\u4e8e\u6307\u9488\u6765\u8bf4\uff0c\u9700\u8981\u6ce8\u610f\uff1a \u51fd\u6570\u4f53\u5185\u5b9a\u4e49\u7684\u53d8\u91cf\u4e00\u822c\u6765\u8bf4\u653e\u5728\u975e\u56fa\u5b9a\u5730\u5740\u4e2d\uff0c constexpr \u6307\u9488\u4e0d\u80fd\u6307\u5411\u8fd9\u6837\u7684\u53d8\u91cf\uff1b \u5728 constexpr \u58f0\u660e\u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6307\u9488\uff0c\u5219\u53ea\u662f\u751f\u6210\u4e86\u4e00\u4e2a\u9876\u5c42 const \uff0c\u5373\u5e38\u91cf\u6307\u9488\u3002 1 2 3 4 5 6 constexpr int i = 42 ; int j = 41 ; // i and j must be defined out of function constexpr const int * p1 = & i ; constexpr int * p1 = & j ; // ERROR: constexpr int *p1 = &i","title":"(4). \u5e38\u91cf\u8868\u8fbe\u5f0f"},{"location":"1/1.3/","text":"1. \u7c7b\u578b\u522b\u540d \u2003\u7c7b\u578b\u522b\u540d\u662f\u67d0\u79cd\u7c7b\u578b\u7684\u540c\u4e49\u8bcd\u3002\u4f20\u7edf\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 typedef \u5173\u952e\u5b57\uff0c\u65b0\u6807\u51c6\u4f7f\u7528\u522b\u540d\u58f0\u660e\u5b9a\u4e49\u7c7b\u578b\u7684\u522b\u540d\uff1a 1 2 3 4 5 typedef double wages ; typedef wages * p ; using hour = int ; using day = int * ; \u5982\u679c\u67d0\u4e2a\u522b\u540d\u7c7b\u578b\u6307\u4ee3\u7684\u662f\u590d\u5408\u7c7b\u578b\u6216\u5e38\u91cf\uff0c\u5c31\u53ef\u80fd\u4ea7\u751f\u9884\u6599\u4e0d\u5230\u7684\u540e\u679c\u3002\u4f8b\u5982\uff1a 1 2 typedef char * pstring ; const pstring cstr = 0 ; \u4e0a\u9762\u7684\u5199\u6cd5\u4e0d\u7b49\u540c\u4e8e const char *cstr \uff0c\u5b83\u7684\u6570\u636e\u7c7b\u578b\u662f char \uff0c * \u662f\u58f0\u660e\u7b26\u7684\u4e00\u90e8\u5206\u3002\u800c\u4e0a\u9762\u7684\u5199\u6cd5 * \u662f\u7c7b\u578b\u4e2d\u7684\u4e00\u90e8\u5206\uff0c cstr \u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\u3002 2. auto \u7c7b\u578b\u8bf4\u660e\u7b26 \u2003\u5728\u628a\u8868\u8fbe\u5f0f\u8d4b\u7ed9\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u9700\u8981\u77e5\u9053\u53d8\u91cf\u7684\u7c7b\u578b\u7528\u4ee5\u58f0\u660e\uff0c\u4f46\u6709\u65f6\u505a\u4e0d\u5230\u3002 C++11 \u5f15\u5165\u4e86 auto \u8bf4\u660e\u7b26\uff0c\u8ba9\u7f16\u8bd1\u5668\u901a\u8fc7\u53d8\u91cf\u7684\u521d\u503c\u5206\u6790\u8868\u8fbe\u5f0f\u6240\u5c5e\u7684\u7c7b\u578b\u3002 1 auto item = val1 + val2 ; // item must be initialized \u2460 \u5982\u679c\u4ee5\u5f15\u7528\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u5668\u4ee5\u88ab\u5f15\u7528\u5bf9\u8c61\u7684\u7c7b\u578b\u4f5c\u4e3a auto \u7684\u7c7b\u578b\uff1b 1 2 int i = 0 , & r = i ; auto a = r ; \u2461 auto \u4e00\u822c\u4f1a\u5ffd\u7565\u9876\u5c42 const \uff0c\u4fdd\u7559\u5e95\u5c42 const \uff0c\u5982\u679c\u5e0c\u671b\u63a8\u65ad\u7684\u7c7b\u578b\u662f\u9876\u5c42 const \uff0c\u5219\u9700\u8981\u660e\u786e\u6307\u51fa\u3002 1 2 3 4 5 6 7 8 int i = 0 ; const int ci = i , & cr = ci ; auto b = ci ; // top-level const is ignored const auto bi = ci ; auto d = & i ; auto e = & ci ; // low-level const is reserved","title":"3.type"},{"location":"1/1.3/#1","text":"\u7c7b\u578b\u522b\u540d\u662f\u67d0\u79cd\u7c7b\u578b\u7684\u540c\u4e49\u8bcd\u3002\u4f20\u7edf\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 typedef \u5173\u952e\u5b57\uff0c\u65b0\u6807\u51c6\u4f7f\u7528\u522b\u540d\u58f0\u660e\u5b9a\u4e49\u7c7b\u578b\u7684\u522b\u540d\uff1a 1 2 3 4 5 typedef double wages ; typedef wages * p ; using hour = int ; using day = int * ; \u5982\u679c\u67d0\u4e2a\u522b\u540d\u7c7b\u578b\u6307\u4ee3\u7684\u662f\u590d\u5408\u7c7b\u578b\u6216\u5e38\u91cf\uff0c\u5c31\u53ef\u80fd\u4ea7\u751f\u9884\u6599\u4e0d\u5230\u7684\u540e\u679c\u3002\u4f8b\u5982\uff1a 1 2 typedef char * pstring ; const pstring cstr = 0 ; \u4e0a\u9762\u7684\u5199\u6cd5\u4e0d\u7b49\u540c\u4e8e const char *cstr \uff0c\u5b83\u7684\u6570\u636e\u7c7b\u578b\u662f char \uff0c * \u662f\u58f0\u660e\u7b26\u7684\u4e00\u90e8\u5206\u3002\u800c\u4e0a\u9762\u7684\u5199\u6cd5 * \u662f\u7c7b\u578b\u4e2d\u7684\u4e00\u90e8\u5206\uff0c cstr \u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\u3002","title":"1. \u7c7b\u578b\u522b\u540d"},{"location":"1/1.3/#2-auto","text":"\u5728\u628a\u8868\u8fbe\u5f0f\u8d4b\u7ed9\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5e38\u5e38\u9700\u8981\u77e5\u9053\u53d8\u91cf\u7684\u7c7b\u578b\u7528\u4ee5\u58f0\u660e\uff0c\u4f46\u6709\u65f6\u505a\u4e0d\u5230\u3002 C++11 \u5f15\u5165\u4e86 auto \u8bf4\u660e\u7b26\uff0c\u8ba9\u7f16\u8bd1\u5668\u901a\u8fc7\u53d8\u91cf\u7684\u521d\u503c\u5206\u6790\u8868\u8fbe\u5f0f\u6240\u5c5e\u7684\u7c7b\u578b\u3002 1 auto item = val1 + val2 ; // item must be initialized \u2460 \u5982\u679c\u4ee5\u5f15\u7528\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u5668\u4ee5\u88ab\u5f15\u7528\u5bf9\u8c61\u7684\u7c7b\u578b\u4f5c\u4e3a auto \u7684\u7c7b\u578b\uff1b 1 2 int i = 0 , & r = i ; auto a = r ; \u2461 auto \u4e00\u822c\u4f1a\u5ffd\u7565\u9876\u5c42 const \uff0c\u4fdd\u7559\u5e95\u5c42 const \uff0c\u5982\u679c\u5e0c\u671b\u63a8\u65ad\u7684\u7c7b\u578b\u662f\u9876\u5c42 const \uff0c\u5219\u9700\u8981\u660e\u786e\u6307\u51fa\u3002 1 2 3 4 5 6 7 8 int i = 0 ; const int ci = i , & cr = ci ; auto b = ci ; // top-level const is ignored const auto bi = ci ; auto d = & i ; auto e = & ci ; // low-level const is reserved","title":"2. auto \u7c7b\u578b\u8bf4\u660e\u7b26"},{"location":"1/1.4/","text":"1. \u5b9a\u4e49\u548c\u521d\u59cb\u5316 \u5728 C++ \u4e2d\uff0c\u6570\u7ec4\u7684\u7ef4\u5ea6\u5728\u7f16\u8bd1\u65f6\u5fc5\u987b\u5df2\u77e5\uff0c\u7ef4\u5ea6\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 1 2 3 4 unsigned int = 42 ; constexpr unsigned sz = 42 ; int * p [ sz ]; string bad [ cnt ]; // \u53ef\u80fd\u4f1a\u7f16\u8bd1\u4e0d\u901a\u8fc7\u6216\u4ea7\u751f\u5176\u4ed6\u95ee\u9898 \u5217\u8868\u521d\u59cb\u5316\uff1a 1 2 const unsigned sz = 6 ; int ial [ sz ] = { 0 , 1 , 2 }; \u5b57\u7b26\u6570\u7ec4\u7684\u7279\u6b8a\u6027\uff1a 1 2 3 4 char a1 [] = { 'C' , '+' , '+' }; // \u65e0\u7a7a\u5b57\u7b26 char a2 [] = { 'C' , '+' , '+' , '\\0' }; // \u663e\u5f0f\u7a7a\u5b57\u7b26 char a3 [] = \"C++\" ; // \u81ea\u52a8\u6dfb\u52a0\u7a7a\u5b57\u7b26 const char a4 [ 6 ] = \"Daniel\" ; // ERROR \u66f4\u52a0\u590d\u6742\u7684\u6570\u7ec4\u58f0\u660e\uff1a 1 2 3 4 5 int arr [ 10 ] = { 0 , 1 , 2 ,}; int * ptrs [ 10 ]; // ptrs \u662f\u542b\u670910\u4e2a\u6574\u5f62\u6307\u9488\u7684\u6570\u7ec4 int ( * parray )[ 10 ] = & arr ; // parray \u6307\u5411\u4e00\u4e2a\u542b\u670910\u4e2a\u6574\u6570\u7684\u6570\u7ec4 int ( & arrref )[ 10 ] = arr ; // arrref \u5f15\u7528\u4e00\u4e2a\u542b\u670910\u4e2a\u6574\u6570\u7684\u6570\u7ec4 int * ( & arry )[ 10 ] = ptrs ; // arry \u662f\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u8be5\u6570\u7ec4\u542b\u670910\u4e2a\u6307\u9488 \u2003\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u4fee\u9970\u7b26\u4ece\u53f3\u5411\u5de6\u4f9d\u6b21\u7ed1\u5b9a\u3002\u5bf9\u4e8e ptrs \u6765\u8bf4\uff0c\u53ef\u4ee5\u4f9d\u6b21\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 10 \u7684\u6570\u7ec4\u3001\u540d\u5b57\u4e3a ptrs \u3001\u5b58\u653e\u7c7b\u578b\u4e3a int \u7684\u6307\u9488\u3002 \u2003\u5bf9\u4e8e parray \uff0c\u7531\u4e8e\u62ec\u53f7\u7684\u5b58\u5728\uff0c\u9700\u8981\u4ece\u5185\u5411\u5916\u89e3\u8bfb\u3002\u9996\u5148\u7531 *parray \u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u7136\u540e\u4f9d\u6b21\u77e5\u9053\u5b83\u6307\u5411\u4e00\u4e2a\u5927\u5c0f\u4e3a 10 \u7684\u6570\u7ec4\u3001\u6570\u7ec4\u4e2d\u7c7b\u578b\u4e3a int \u3002\u5bf9\u4e8e arrref \u4e5f\u662f\u540c\u7406\u3002 \u2003\u5728\u4f7f\u7528\u6570\u7ec4\u4e0b\u6807\u65f6\uff0c\u5e38\u4f7f\u7528 size_t \u7c7b\u578b\u3002\u5b83\u662f\u4e00\u79cd\u673a\u5668\u76f8\u5173\u7684\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u5b83\u88ab\u8bbe\u8ba1\u7684\u8db3\u591f\u5927\u4ee5\u5bb9\u7eb3\u5185\u5b58\u4e2d\u4efb\u610f\u5bf9\u8c61\u7684\u5927\u5c0f\u3002\u5b83\u5b9a\u4e49\u5728 cstddef \u4e2d\uff0c\u662f C \u6807\u51c6\u5e93 stddef.h \u7684 C++ \u7248\u672c\u3002 2. \u6307\u9488\u4e0e\u6570\u7ec4 \u5728\u7528\u5230\u6570\u7ec4\u540d\u5b57\u7684\u5730\u65b9\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u5176\u66ff\u6362\u4e3a\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u7684\u6307\u9488\uff1a string * p2 = nums ; // <==> p2 = &nums[0] \u5f53\u4f7f\u7528 decltype \u5173\u952e\u5b57\u65f6\uff0c\u4e0a\u8ff0\u8f6c\u6362\u4e0d\u4f1a\u53d1\u751f\u3002 1 2 3 4 5 int ia [] = { 0 , 1 , 2 , 3 }; // ia2 \u662f\u4e00\u4e2a\u6574\u578b\u6307\u9488\uff0c\u6307\u5411 ia \u7b2c\u4e00\u4e2a\u5143\u7d20 auto ia2 ( ia ); // <==> auto ia2(&ia[0]) // ia3 \u662f\u4e00\u4e2a\u542b\u6709 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 decltype ( ia ) ia3 = { 0 , 1 , 2 , 3 }; 3. \u6307\u9488\u4e0e\u8fed\u4ee3\u5668 \u2003\u5bf9\u8fed\u4ee3\u5668\u7684\u8fd0\u7b97\u4e5f\u9002\u7528\u4e8e\u6307\u9488\u3002\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u5c3e\u540e\u6307\u9488\uff0c\u4f46\u6613\u51fa\u9519\uff0c C++11 \u5728\u6807\u51c6\u5e93\u4e2d\u5f15\u5165\u4e86 begin \u548c end \u51fd\u6570\u3002 int * pbeg = begin ( arr ), * pend = end ( arr ); \u6307\u9488\u76f8\u51cf\u7684\u7ed3\u679c\u662f\u4e00\u79cd\u540d\u4e3a ptrdiff_t \u7684\u7c7b\u578b\uff0c\u548c size_t \u5b9a\u4e49\u5728\u540c\u4e00\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u7684\u6bd4\u8f83\u548c\u76f8\u51cf\u6ca1\u6709\u610f\u4e49\u3002 4. \u6307\u9488\u4e0e\u4e0b\u6807 \u53ea\u8981\u6307\u9488\u6307\u5411\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\u4e0b\u6807\u8fd0\u7b97\u3002 1 2 3 4 int ia [] = { 0 , 2 , 4 , 6 , 8 }; int * p = & ia [ 2 ]; int j = p [ 1 ]; // = *(p + 1) = ia[3] int k = p [ - 2 ]; // ia[0] \u6807\u51c6\u5e93\u7684\u4e0b\u6807\u8fd0\u7b97\u5fc5\u987b\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u800c\u5185\u7f6e\u7684\u4e0b\u6807\u8fd0\u7b97\u65e0\u6b64\u8981\u6c42\u3002","title":"4.array"},{"location":"1/1.4/#1","text":"\u5728 C++ \u4e2d\uff0c\u6570\u7ec4\u7684\u7ef4\u5ea6\u5728\u7f16\u8bd1\u65f6\u5fc5\u987b\u5df2\u77e5\uff0c\u7ef4\u5ea6\u5fc5\u987b\u662f\u4e00\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002 1 2 3 4 unsigned int = 42 ; constexpr unsigned sz = 42 ; int * p [ sz ]; string bad [ cnt ]; // \u53ef\u80fd\u4f1a\u7f16\u8bd1\u4e0d\u901a\u8fc7\u6216\u4ea7\u751f\u5176\u4ed6\u95ee\u9898 \u5217\u8868\u521d\u59cb\u5316\uff1a 1 2 const unsigned sz = 6 ; int ial [ sz ] = { 0 , 1 , 2 }; \u5b57\u7b26\u6570\u7ec4\u7684\u7279\u6b8a\u6027\uff1a 1 2 3 4 char a1 [] = { 'C' , '+' , '+' }; // \u65e0\u7a7a\u5b57\u7b26 char a2 [] = { 'C' , '+' , '+' , '\\0' }; // \u663e\u5f0f\u7a7a\u5b57\u7b26 char a3 [] = \"C++\" ; // \u81ea\u52a8\u6dfb\u52a0\u7a7a\u5b57\u7b26 const char a4 [ 6 ] = \"Daniel\" ; // ERROR \u66f4\u52a0\u590d\u6742\u7684\u6570\u7ec4\u58f0\u660e\uff1a 1 2 3 4 5 int arr [ 10 ] = { 0 , 1 , 2 ,}; int * ptrs [ 10 ]; // ptrs \u662f\u542b\u670910\u4e2a\u6574\u5f62\u6307\u9488\u7684\u6570\u7ec4 int ( * parray )[ 10 ] = & arr ; // parray \u6307\u5411\u4e00\u4e2a\u542b\u670910\u4e2a\u6574\u6570\u7684\u6570\u7ec4 int ( & arrref )[ 10 ] = arr ; // arrref \u5f15\u7528\u4e00\u4e2a\u542b\u670910\u4e2a\u6574\u6570\u7684\u6570\u7ec4 int * ( & arry )[ 10 ] = ptrs ; // arry \u662f\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u8be5\u6570\u7ec4\u542b\u670910\u4e2a\u6307\u9488 \u2003\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7c7b\u578b\u4fee\u9970\u7b26\u4ece\u53f3\u5411\u5de6\u4f9d\u6b21\u7ed1\u5b9a\u3002\u5bf9\u4e8e ptrs \u6765\u8bf4\uff0c\u53ef\u4ee5\u4f9d\u6b21\u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a 10 \u7684\u6570\u7ec4\u3001\u540d\u5b57\u4e3a ptrs \u3001\u5b58\u653e\u7c7b\u578b\u4e3a int \u7684\u6307\u9488\u3002 \u2003\u5bf9\u4e8e parray \uff0c\u7531\u4e8e\u62ec\u53f7\u7684\u5b58\u5728\uff0c\u9700\u8981\u4ece\u5185\u5411\u5916\u89e3\u8bfb\u3002\u9996\u5148\u7531 *parray \u77e5\u9053\u5b83\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u7136\u540e\u4f9d\u6b21\u77e5\u9053\u5b83\u6307\u5411\u4e00\u4e2a\u5927\u5c0f\u4e3a 10 \u7684\u6570\u7ec4\u3001\u6570\u7ec4\u4e2d\u7c7b\u578b\u4e3a int \u3002\u5bf9\u4e8e arrref \u4e5f\u662f\u540c\u7406\u3002 \u2003\u5728\u4f7f\u7528\u6570\u7ec4\u4e0b\u6807\u65f6\uff0c\u5e38\u4f7f\u7528 size_t \u7c7b\u578b\u3002\u5b83\u662f\u4e00\u79cd\u673a\u5668\u76f8\u5173\u7684\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u5b83\u88ab\u8bbe\u8ba1\u7684\u8db3\u591f\u5927\u4ee5\u5bb9\u7eb3\u5185\u5b58\u4e2d\u4efb\u610f\u5bf9\u8c61\u7684\u5927\u5c0f\u3002\u5b83\u5b9a\u4e49\u5728 cstddef \u4e2d\uff0c\u662f C \u6807\u51c6\u5e93 stddef.h \u7684 C++ \u7248\u672c\u3002","title":"1. \u5b9a\u4e49\u548c\u521d\u59cb\u5316"},{"location":"1/1.4/#2","text":"\u5728\u7528\u5230\u6570\u7ec4\u540d\u5b57\u7684\u5730\u65b9\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u5176\u66ff\u6362\u4e3a\u6307\u5411\u6570\u7ec4\u9996\u5143\u7d20\u7684\u6307\u9488\uff1a string * p2 = nums ; // <==> p2 = &nums[0] \u5f53\u4f7f\u7528 decltype \u5173\u952e\u5b57\u65f6\uff0c\u4e0a\u8ff0\u8f6c\u6362\u4e0d\u4f1a\u53d1\u751f\u3002 1 2 3 4 5 int ia [] = { 0 , 1 , 2 , 3 }; // ia2 \u662f\u4e00\u4e2a\u6574\u578b\u6307\u9488\uff0c\u6307\u5411 ia \u7b2c\u4e00\u4e2a\u5143\u7d20 auto ia2 ( ia ); // <==> auto ia2(&ia[0]) // ia3 \u662f\u4e00\u4e2a\u542b\u6709 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 decltype ( ia ) ia3 = { 0 , 1 , 2 , 3 };","title":"2. \u6307\u9488\u4e0e\u6570\u7ec4"},{"location":"1/1.4/#3","text":"\u5bf9\u8fed\u4ee3\u5668\u7684\u8fd0\u7b97\u4e5f\u9002\u7528\u4e8e\u6307\u9488\u3002\u5c3d\u7ba1\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u5c3e\u540e\u6307\u9488\uff0c\u4f46\u6613\u51fa\u9519\uff0c C++11 \u5728\u6807\u51c6\u5e93\u4e2d\u5f15\u5165\u4e86 begin \u548c end \u51fd\u6570\u3002 int * pbeg = begin ( arr ), * pend = end ( arr ); \u6307\u9488\u76f8\u51cf\u7684\u7ed3\u679c\u662f\u4e00\u79cd\u540d\u4e3a ptrdiff_t \u7684\u7c7b\u578b\uff0c\u548c size_t \u5b9a\u4e49\u5728\u540c\u4e00\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u7684\u6bd4\u8f83\u548c\u76f8\u51cf\u6ca1\u6709\u610f\u4e49\u3002","title":"3. \u6307\u9488\u4e0e\u8fed\u4ee3\u5668"},{"location":"1/1.4/#4","text":"\u53ea\u8981\u6307\u9488\u6307\u5411\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\u4e0b\u6807\u8fd0\u7b97\u3002 1 2 3 4 int ia [] = { 0 , 2 , 4 , 6 , 8 }; int * p = & ia [ 2 ]; int j = p [ 1 ]; // = *(p + 1) = ia[3] int k = p [ - 2 ]; // ia[0] \u6807\u51c6\u5e93\u7684\u4e0b\u6807\u8fd0\u7b97\u5fc5\u987b\u662f\u65e0\u7b26\u53f7\u7c7b\u578b\uff0c\u800c\u5185\u7f6e\u7684\u4e0b\u6807\u8fd0\u7b97\u65e0\u6b64\u8981\u6c42\u3002","title":"4. \u6307\u9488\u4e0e\u4e0b\u6807"},{"location":"2/2.1/","text":"1. const \u5f62\u53c2 \u5f62\u53c2\u521d\u59cb\u5316\u548c\u53d8\u91cf\u521d\u59cb\u5316\u662f\u4e00\u6837\u7684\uff0c\u5bf9\u4e8e\u9876\u5c42\u548c\u5e95\u5c42 const \u7684\u8ba8\u8bba\u4ecd\u9002\u7528\u4e8e\u6b64\u3002 1 2 3 4 5 6 7 8 9 10 11 void reset ( int * n ); void reset ( int & n ); ... int i = 0 ; const int ci = i ; reset ( & i ); reset ( & ci ); // ERROR reset ( i ); reset ( ci ); // ERROR reset ( 42 ); // ERROR 2. \u5f15\u7528\u5f62\u53c2\u548c\u6307\u9488\u5f62\u53c2 \u2003\u5f62\u53c2\u662f\u51fd\u6570\u5185\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u548c\u4e00\u822c\u7684\u53d8\u91cf\u521d\u59cb\u5316\u4e00\u6837\uff0c\u62f7\u8d1d\u4e0d\u4f1a\u5f71\u54cd\u539f\u503c\u3002\u5df2\u77e5\u5f15\u7528\u4e5f\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f53\u9700\u8981\u4fee\u6539\u539f\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5f62\u53c2\u4e3a\u5f15\u7528\u6216\u6307\u9488\uff0c\u4e8c\u8005\u533a\u522b\u4e0d\u5927\u3002 \u2003\u5f53\u4e0d\u9700\u8981\u4fee\u6539\u539f\u5bf9\u8c61\uff0c\u901a\u8fc7\u6307\u9488\u6216\u5f15\u7528\u4f20\u5165\u53ef\u4ee5\u907f\u514d\u5bf9\u539f\u5bf9\u8c61\u8fdb\u884c\u62f7\u8d1d (\u90e8\u5206\u5bf9\u8c61\u751a\u81f3\u4e0d\u652f\u6301\u62f7\u8d1d)\uff0c\u8282\u7701\u4e00\u90e8\u5206\u7a7a\u95f4\u3002\u6b64\u65f6\u6700\u597d\u4f7f\u7528\u5e38\u91cf\u5f15\u7528\uff0c\u597d\u5904\u5728\u4e8e\uff1a\u2460 \u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u5bf9\u8c61\uff0c\u4e0d\u5fc5\u53d6\u5f15\u7528\uff1b\u2461 \u9650\u5236\u5bf9\u539f\u5bf9\u8c61\u4fee\u6539\uff1b\u2462 \u666e\u901a\u5f15\u7528\u4f1a\u9650\u5236 const \u5bf9\u8c61\u3001\u5b57\u9762\u91cf\u3001\u9700\u8981\u7c7b\u578b\u8f6c\u6362\u7684\u5bf9\u8c61\u7684\u4f20\u5165\u3002 3. \u53ef\u53d8\u53c2\u6570 \u2003\u4e3a\u5b9e\u73b0\u53ef\u53d8\u53c2\u6570\uff0c C++11 \u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u6cd5\u3002\u82e5\u6240\u6709\u5b9e\u53c2\u7c7b\u578b\u90fd\u76f8\u540c\uff0c\u53ef\u4f7f\u7528 initializer_list \u7c7b\u578b\u7684\u5f62\u53c2\uff0c\u5b83\u5b9a\u4e49\u5728\u540c\u540d\u7684\u5934\u6587\u4ef6\u4e2d\uff1b\u5982\u679c\u5b9e\u53c2\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u6a21\u677f\u3002\u5728\u4e0e C \u63a5\u53e3\u4ea4\u4e92\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u7701\u7565\u7b26 ... \uff0c\u53ea\u5bf9\u4e8e C \u548c C++ \u901a\u7528\u7684\u7c7b\u578b\u4f7f\u7528\u5b83\u3002 initiallizer_list initializer_list<T> lst; ... lst.begin() lst.end() lst.size \u548c vector \u4e0d\u540c\u7684\u662f\uff0c initializer_list \u4e2d\u7684\u6c38\u8fdc\u662f\u5e38\u91cf\u3002\u5728\u4f20\u9012\u5b9e\u53c2\u7684\u65f6\u5019\uff0c\u8981\u628a\u53c2\u6570\u5199\u5728\u82b1\u62ec\u53f7\u5185\u3002 4. \u8fd4\u56de\u503c (1). \u5f15\u7528\u8fd4\u56de\u5de6\u503c \u8c03\u7528\u4e00\u4e2a\u8fd4\u56de\u5f15\u7528\u7684\u51fd\u6570\u5f97\u5230\u5de6\u503c\uff0c\u5176\u4ed6\u8fd4\u56de\u7c7b\u578b\u5f97\u5230\u53f3\u503c\u3002 1 2 3 4 5 6 7 8 char & get_val ( string & str , string :: size_type ix ) { return str [ ix ]; } int main () { string s ( \"a value\" ); get_val ( s , 0 ) = 'A' ; } (2). \u5217\u8868\u521d\u59cb\u5316\u8fd4\u56de\u503c C++11 \u652f\u6301\u51fd\u6570\u8fd4\u56de\u82b1\u62ec\u53f7\u5217\u8868\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u51fd\u6570\u8fd4\u56de\u7684\u4e34\u65f6\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 vector < string > process ( string expected , string actual ) { if ( expected . empty ()) return {}; else if ( expected == actual ) return { \"functionX\" , \"okay\" }; else return { \"functionX\" , expected , actual }; }","title":"1.parameters and returns"},{"location":"2/2.1/#1-const","text":"\u5f62\u53c2\u521d\u59cb\u5316\u548c\u53d8\u91cf\u521d\u59cb\u5316\u662f\u4e00\u6837\u7684\uff0c\u5bf9\u4e8e\u9876\u5c42\u548c\u5e95\u5c42 const \u7684\u8ba8\u8bba\u4ecd\u9002\u7528\u4e8e\u6b64\u3002 1 2 3 4 5 6 7 8 9 10 11 void reset ( int * n ); void reset ( int & n ); ... int i = 0 ; const int ci = i ; reset ( & i ); reset ( & ci ); // ERROR reset ( i ); reset ( ci ); // ERROR reset ( 42 ); // ERROR","title":"1. const \u5f62\u53c2"},{"location":"2/2.1/#2","text":"\u5f62\u53c2\u662f\u51fd\u6570\u5185\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u548c\u4e00\u822c\u7684\u53d8\u91cf\u521d\u59cb\u5316\u4e00\u6837\uff0c\u62f7\u8d1d\u4e0d\u4f1a\u5f71\u54cd\u539f\u503c\u3002\u5df2\u77e5\u5f15\u7528\u4e5f\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f53\u9700\u8981\u4fee\u6539\u539f\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5f62\u53c2\u4e3a\u5f15\u7528\u6216\u6307\u9488\uff0c\u4e8c\u8005\u533a\u522b\u4e0d\u5927\u3002 \u2003\u5f53\u4e0d\u9700\u8981\u4fee\u6539\u539f\u5bf9\u8c61\uff0c\u901a\u8fc7\u6307\u9488\u6216\u5f15\u7528\u4f20\u5165\u53ef\u4ee5\u907f\u514d\u5bf9\u539f\u5bf9\u8c61\u8fdb\u884c\u62f7\u8d1d (\u90e8\u5206\u5bf9\u8c61\u751a\u81f3\u4e0d\u652f\u6301\u62f7\u8d1d)\uff0c\u8282\u7701\u4e00\u90e8\u5206\u7a7a\u95f4\u3002\u6b64\u65f6\u6700\u597d\u4f7f\u7528\u5e38\u91cf\u5f15\u7528\uff0c\u597d\u5904\u5728\u4e8e\uff1a\u2460 \u53ef\u4ee5\u76f4\u63a5\u4f20\u5165\u5bf9\u8c61\uff0c\u4e0d\u5fc5\u53d6\u5f15\u7528\uff1b\u2461 \u9650\u5236\u5bf9\u539f\u5bf9\u8c61\u4fee\u6539\uff1b\u2462 \u666e\u901a\u5f15\u7528\u4f1a\u9650\u5236 const \u5bf9\u8c61\u3001\u5b57\u9762\u91cf\u3001\u9700\u8981\u7c7b\u578b\u8f6c\u6362\u7684\u5bf9\u8c61\u7684\u4f20\u5165\u3002","title":"2. \u5f15\u7528\u5f62\u53c2\u548c\u6307\u9488\u5f62\u53c2"},{"location":"2/2.1/#3","text":"\u4e3a\u5b9e\u73b0\u53ef\u53d8\u53c2\u6570\uff0c C++11 \u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u6cd5\u3002\u82e5\u6240\u6709\u5b9e\u53c2\u7c7b\u578b\u90fd\u76f8\u540c\uff0c\u53ef\u4f7f\u7528 initializer_list \u7c7b\u578b\u7684\u5f62\u53c2\uff0c\u5b83\u5b9a\u4e49\u5728\u540c\u540d\u7684\u5934\u6587\u4ef6\u4e2d\uff1b\u5982\u679c\u5b9e\u53c2\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u6a21\u677f\u3002\u5728\u4e0e C \u63a5\u53e3\u4ea4\u4e92\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u4f7f\u7528\u7701\u7565\u7b26 ... \uff0c\u53ea\u5bf9\u4e8e C \u548c C++ \u901a\u7528\u7684\u7c7b\u578b\u4f7f\u7528\u5b83\u3002 initiallizer_list initializer_list<T> lst; ... lst.begin() lst.end() lst.size \u548c vector \u4e0d\u540c\u7684\u662f\uff0c initializer_list \u4e2d\u7684\u6c38\u8fdc\u662f\u5e38\u91cf\u3002\u5728\u4f20\u9012\u5b9e\u53c2\u7684\u65f6\u5019\uff0c\u8981\u628a\u53c2\u6570\u5199\u5728\u82b1\u62ec\u53f7\u5185\u3002","title":"3. \u53ef\u53d8\u53c2\u6570"},{"location":"2/2.1/#4","text":"","title":"4. \u8fd4\u56de\u503c"},{"location":"2/2.1/#1","text":"\u8c03\u7528\u4e00\u4e2a\u8fd4\u56de\u5f15\u7528\u7684\u51fd\u6570\u5f97\u5230\u5de6\u503c\uff0c\u5176\u4ed6\u8fd4\u56de\u7c7b\u578b\u5f97\u5230\u53f3\u503c\u3002 1 2 3 4 5 6 7 8 char & get_val ( string & str , string :: size_type ix ) { return str [ ix ]; } int main () { string s ( \"a value\" ); get_val ( s , 0 ) = 'A' ; }","title":"(1). \u5f15\u7528\u8fd4\u56de\u5de6\u503c"},{"location":"2/2.1/#2_1","text":"C++11 \u652f\u6301\u51fd\u6570\u8fd4\u56de\u82b1\u62ec\u53f7\u5217\u8868\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u51fd\u6570\u8fd4\u56de\u7684\u4e34\u65f6\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 vector < string > process ( string expected , string actual ) { if ( expected . empty ()) return {}; else if ( expected == actual ) return { \"functionX\" , \"okay\" }; else return { \"functionX\" , expected , actual }; }","title":"(2). \u5217\u8868\u521d\u59cb\u5316\u8fd4\u56de\u503c"},{"location":"3/3.0/","text":"1. \u5bb9\u5668\u7684\u5b9a\u4e49\u548c\u521d\u59cb\u5316 initialization C c; \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002\u5982\u679c C \u662f array\uff0c\u5219\u6309 c \u4e2d\u5143\u7d20\u7684\u9ed8\u8ba4\u65b9\u5f0f\u521d\u59cb\u5316\uff0c\u5426\u5219 c \u4e3a\u7a7a\u3002 C c1(c2); C c1 = c2; c1 \u548c c2 \u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b (\u5bb9\u5668\u7c7b\u578b\u3001\u5143\u7d20\u7c7b\u578b)\u3002\u5bf9\u4e8e array\uff0c\u4e24\u8005\u5927\u5c0f\u8fd8\u5fc5\u987b\u76f8\u540c\u3002 C c{a, b, c...}; C c = {a, b, c...}; \u5217\u8868\u4e2d\u5143\u7d20\u5fc5\u987b\u4e0e C \u76f8\u5bb9\u3002 C c(b, e); c \u521d\u59cb\u5316\u4e3a\u8fed\u4ee3\u5668\u6307\u5b9a\u8303\u56f4\u5185\u5143\u7d20\u7684\u62f7\u8d1d\u3002\u8303\u56f4\u4e2d\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u4e0e C \u76f8\u5bb9\u3002 array \u4e0d\u9002\u7528\u3002 C seq(n); n \u4e3a\u5927\u5c0f\u53c2\u6570\u3002\u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u5668\uff0c\u5219\u8fd8\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u6784\u9020\u5668\u3002array\u3001string \u4e0d\u9002\u7528\u3002\u5173\u8054\u5bb9\u5668\u4e0d\u652f\u6301\u3002 C seq(n, t); n \u4e2a\u503c\u4e3a t \u7684\u5143\u7d20\u3002array \u4e0d\u9002\u7528\u3002 \u901a\u8fc7\u8fed\u4ee3\u5668\u6307\u5b9a\u8303\u56f4\u7684\u521d\u59cb\u5316\u65f6\uff0c\u5185\u90e8\u7c7b\u578b\u76f8\u540c\u5373\u53ef\u3002 1 2 3 vector < const char *> articles = { \"a\" , \"an\" , \"the\" }; vector < string > words1 ( articles ); // ERROR forward_list < string > words2 ( articles . begin (), articles . end ()); // correct 2. \u5bb9\u5668\u7684\u8d4b\u503c\u548c swap assignment operation c1 = c2; \u5c06 c1 \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a c2 \u4e2d\u7684\u5143\u7d20\u7684\u62f7\u8d1d\u3002c1 \u548c c2 \u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u3002 c = {a, b, c...}; \u5c06 c1 \u66ff\u6362\u4e3a\u5217\u8868\u4e2d\u5143\u7d20\u7684\u62f7\u8d1d\uff0carray \u4e0d\u9002\u7528\u3002 swap(c1, c2); c1.swap(c2); \u4ea4\u6362 c1 \u548c c2 \u4e2d\u7684\u5143\u7d20\uff0c\u4e24\u8005\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\uff0c\u901a\u5e38\u6bd4\u62f7\u8d1d\u5feb\u5f97\u591a\u3002 seq.assign(b, e); \u5c06 seq \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a\u8fed\u4ee3\u5668\u6240\u6307\u8303\u56f4\u5185\u7684\u5143\u7d20\u3002b \u548c e \u4e0d\u80fd\u6307\u5411 seq \u4e2d\u7684\u5143\u7d20\u3002\u5173\u8054\u5bb9\u5668\u548c array \u4e0d\u652f\u6301 assign()\u3002 seq.assign(i1); \u5c06 seq \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a\u521d\u59cb\u5316\u5217\u8868 i1 \u7684\u5143\u7d20\u3002 seq.assign(n, t); \u5c06 seq \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a n \u4e2a\u503c\u4e3a t \u7684\u5143\u7d20\u3002 \u2003\u8d4b\u503c\u8fd0\u7b97\u7b26\u8981\u6c42\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u8fd0\u7b97\u5bf9\u8c61\u7c7b\u578b\u76f8\u540c\u3002\u987a\u5e8f\u5bb9\u5668\u989d\u5916\u652f\u6301 assign \u64cd\u4f5c\uff0c\u5141\u8bb8\u4ece\u4e00\u4e2a\u4e0d\u540c\u4f46\u76f8\u5bb9\u7684\u7c7b\u578b\u8d4b\u503c\u3002 \u2003\u666e\u901a\u5bb9\u5668\u7684 swap \u53ea\u662f\u4ea4\u6362\u4e86\u5bb9\u5668\u5185\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u672c\u8eab\u4e0d\u53d8\uff0c\u56e0\u6b64\u901f\u5ea6\u5f88\u5feb\u3002\u800c\u5bf9\u4e8e array \uff0c swap \u4f1a\u771f\u6b63\u4ea4\u6362\u4e24\u4e2a\u5bb9\u5668\u7684\u5143\u7d20\u3002\u65b0\u6807\u51c6\u63d0\u4f9b\u4e86\u975e\u6210\u5458\u7248\u672c\u7684 swap() \uff0c\u5b83\u5bf9\u4e8e\u6cdb\u578b\u7f16\u7a0b\u662f\u5f88\u6709\u7528\u7684\u3002 3. \u5bb9\u5668\u7684\u5927\u5c0f\u64cd\u4f5c size operation c.size() \u5927\u5c0f c.max_size() \u8fd4\u56de\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5\u7c7b\u578b\u5bb9\u5668\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u7684\u503c c.empty() size() == 0 4. \u5173\u7cfb\u8fd0\u7b97\u7b26 \u5bb9\u5668\u7684\u6bd4\u8f83\u662f\u5143\u7d20\u7684\u9010\u5bf9\u6bd4\u8f83\u3002 relational operators ==, != \u6240\u6709\u5bb9\u5668\u90fd\u652f\u6301 >, >=, <, <= \u9664\u4e86\u65e0\u5e8f\u5bb9\u5668\u5916\uff0c\u6240\u6709\u5bb9\u5668\u90fd\u652f\u6301","title":"1.basic operations of container"},{"location":"3/3.0/#1","text":"initialization C c; \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002\u5982\u679c C \u662f array\uff0c\u5219\u6309 c \u4e2d\u5143\u7d20\u7684\u9ed8\u8ba4\u65b9\u5f0f\u521d\u59cb\u5316\uff0c\u5426\u5219 c \u4e3a\u7a7a\u3002 C c1(c2); C c1 = c2; c1 \u548c c2 \u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b (\u5bb9\u5668\u7c7b\u578b\u3001\u5143\u7d20\u7c7b\u578b)\u3002\u5bf9\u4e8e array\uff0c\u4e24\u8005\u5927\u5c0f\u8fd8\u5fc5\u987b\u76f8\u540c\u3002 C c{a, b, c...}; C c = {a, b, c...}; \u5217\u8868\u4e2d\u5143\u7d20\u5fc5\u987b\u4e0e C \u76f8\u5bb9\u3002 C c(b, e); c \u521d\u59cb\u5316\u4e3a\u8fed\u4ee3\u5668\u6307\u5b9a\u8303\u56f4\u5185\u5143\u7d20\u7684\u62f7\u8d1d\u3002\u8303\u56f4\u4e2d\u5143\u7d20\u7c7b\u578b\u5fc5\u987b\u4e0e C \u76f8\u5bb9\u3002 array \u4e0d\u9002\u7528\u3002 C seq(n); n \u4e3a\u5927\u5c0f\u53c2\u6570\u3002\u5982\u679c\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u5668\uff0c\u5219\u8fd8\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u6784\u9020\u5668\u3002array\u3001string \u4e0d\u9002\u7528\u3002\u5173\u8054\u5bb9\u5668\u4e0d\u652f\u6301\u3002 C seq(n, t); n \u4e2a\u503c\u4e3a t \u7684\u5143\u7d20\u3002array \u4e0d\u9002\u7528\u3002 \u901a\u8fc7\u8fed\u4ee3\u5668\u6307\u5b9a\u8303\u56f4\u7684\u521d\u59cb\u5316\u65f6\uff0c\u5185\u90e8\u7c7b\u578b\u76f8\u540c\u5373\u53ef\u3002 1 2 3 vector < const char *> articles = { \"a\" , \"an\" , \"the\" }; vector < string > words1 ( articles ); // ERROR forward_list < string > words2 ( articles . begin (), articles . end ()); // correct","title":"1. \u5bb9\u5668\u7684\u5b9a\u4e49\u548c\u521d\u59cb\u5316"},{"location":"3/3.0/#2-swap","text":"assignment operation c1 = c2; \u5c06 c1 \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a c2 \u4e2d\u7684\u5143\u7d20\u7684\u62f7\u8d1d\u3002c1 \u548c c2 \u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u3002 c = {a, b, c...}; \u5c06 c1 \u66ff\u6362\u4e3a\u5217\u8868\u4e2d\u5143\u7d20\u7684\u62f7\u8d1d\uff0carray \u4e0d\u9002\u7528\u3002 swap(c1, c2); c1.swap(c2); \u4ea4\u6362 c1 \u548c c2 \u4e2d\u7684\u5143\u7d20\uff0c\u4e24\u8005\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\uff0c\u901a\u5e38\u6bd4\u62f7\u8d1d\u5feb\u5f97\u591a\u3002 seq.assign(b, e); \u5c06 seq \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a\u8fed\u4ee3\u5668\u6240\u6307\u8303\u56f4\u5185\u7684\u5143\u7d20\u3002b \u548c e \u4e0d\u80fd\u6307\u5411 seq \u4e2d\u7684\u5143\u7d20\u3002\u5173\u8054\u5bb9\u5668\u548c array \u4e0d\u652f\u6301 assign()\u3002 seq.assign(i1); \u5c06 seq \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a\u521d\u59cb\u5316\u5217\u8868 i1 \u7684\u5143\u7d20\u3002 seq.assign(n, t); \u5c06 seq \u4e2d\u7684\u5143\u7d20\u66ff\u6362\u4e3a n \u4e2a\u503c\u4e3a t \u7684\u5143\u7d20\u3002 \u2003\u8d4b\u503c\u8fd0\u7b97\u7b26\u8981\u6c42\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u8fd0\u7b97\u5bf9\u8c61\u7c7b\u578b\u76f8\u540c\u3002\u987a\u5e8f\u5bb9\u5668\u989d\u5916\u652f\u6301 assign \u64cd\u4f5c\uff0c\u5141\u8bb8\u4ece\u4e00\u4e2a\u4e0d\u540c\u4f46\u76f8\u5bb9\u7684\u7c7b\u578b\u8d4b\u503c\u3002 \u2003\u666e\u901a\u5bb9\u5668\u7684 swap \u53ea\u662f\u4ea4\u6362\u4e86\u5bb9\u5668\u5185\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6570\u636e\u672c\u8eab\u4e0d\u53d8\uff0c\u56e0\u6b64\u901f\u5ea6\u5f88\u5feb\u3002\u800c\u5bf9\u4e8e array \uff0c swap \u4f1a\u771f\u6b63\u4ea4\u6362\u4e24\u4e2a\u5bb9\u5668\u7684\u5143\u7d20\u3002\u65b0\u6807\u51c6\u63d0\u4f9b\u4e86\u975e\u6210\u5458\u7248\u672c\u7684 swap() \uff0c\u5b83\u5bf9\u4e8e\u6cdb\u578b\u7f16\u7a0b\u662f\u5f88\u6709\u7528\u7684\u3002","title":"2. \u5bb9\u5668\u7684\u8d4b\u503c\u548c swap"},{"location":"3/3.0/#3","text":"size operation c.size() \u5927\u5c0f c.max_size() \u8fd4\u56de\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5\u7c7b\u578b\u5bb9\u5668\u6240\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u7684\u503c c.empty() size() == 0","title":"3. \u5bb9\u5668\u7684\u5927\u5c0f\u64cd\u4f5c"},{"location":"3/3.0/#4","text":"\u5bb9\u5668\u7684\u6bd4\u8f83\u662f\u5143\u7d20\u7684\u9010\u5bf9\u6bd4\u8f83\u3002 relational operators ==, != \u6240\u6709\u5bb9\u5668\u90fd\u652f\u6301 >, >=, <, <= \u9664\u4e86\u65e0\u5e8f\u5bb9\u5668\u5916\uff0c\u6240\u6709\u5bb9\u5668\u90fd\u652f\u6301","title":"4. \u5173\u7cfb\u8fd0\u7b97\u7b26"},{"location":"3/3.1/","text":"1. \u987a\u5e8f\u5bb9\u5668\u6982\u8ff0 type of sequence containers vector \u53ef\u53d8\u5927\u5c0f\u6570\u7ec4\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\u3002\u5728\u5c3e\u90e8\u4e4b\u5916\u7684\u4f4d\u7f6e\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\u6162\u3002 deque \u53cc\u7aef\u961f\u5217\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\u3002\u5728\u5934\u5c3e\u63d2\u5165\u5220\u9664\u5f88\u5feb\u3002 list \u53cc\u5411\u94fe\u8868\u3002\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u90fd\u5f88\u5feb\u3002 forward_list \u5355\u5411\u94fe\u8868\u3002\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u90fd\u5f88\u5feb\u3002 array \u56fa\u5b9a\u5927\u5c0f\u6570\u7ec4\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\u3002\u4e0d\u80fd\u6dfb\u52a0\u3001\u5220\u9664\u5143\u7d20\u3002 string \u4e13\u7528\u4e8e\u4fdd\u5b58\u5b57\u7b26\u7684 vector \u9009\u62e9\u5bb9\u5668\u7684\u57fa\u672c\u539f\u5219\uff1a \u5c3d\u91cf\u4f7f\u7528 vector \uff1b \u5982\u679c\u6709\u5f88\u591a\u5c0f\u5143\u7d20\u4e14\u7a7a\u95f4\u5f88\u91cd\u8981\uff0c\u5219\u4e0d\u7528 list \u548c forward_list \uff1b \u5982\u679c\u8981\u6c42\u4e2d\u95f4\u63d2\u5165\u5143\u7d20\uff0c\u5219\u4f7f\u7528 list \u548c forward_list \uff1b \u5982\u679c\u8981\u6c42\u5934\u5c3e\u63d2\u5165\u5143\u7d20\uff0c\u5219\u4f7f\u7528 deque \uff1b \u5982\u679c\u53ea\u5728\u8f93\u5165\u65f6\u9700\u8981\u4e2d\u95f4\u63d2\u5165\u5143\u7d20\uff0c\u5219\u5c3d\u91cf\u5148\u5c3e\u90e8\u8ffd\u52a0\u518d\u5904\u7406\u6570\u636e\uff1b\u5982\u679c\u65e0\u6cd5\u907f\u514d\uff0c\u5219\u5148\u8bfb\u5165\u5230 list \uff0c\u518d\u62f7\u8d1d\u5230 vector \uff1b \u5982\u679c\u65e2\u9700\u8981\u968f\u673a\u8bbf\u95ee\uff0c\u53c8\u9700\u8981\u4e2d\u95f4\u4f4d\u7f6e\u63d2\u5165\uff0c\u5219\u4ee5\u5e94\u7528\u4e2d\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u64cd\u4f5c\u4e3a\u4e2d\u5fc3\u8003\u8651\u6298\u4e2d\u3002 2. \u987a\u5e8f\u5bb9\u5668\u7684\u57fa\u672c\u64cd\u4f5c (1). \u6dfb\u52a0\u64cd\u4f5c insert c.push_back(t) c.emplace_back( args ) \u5728 c \u7684\u5c3e\u90e8\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a t \u6216\u7531 args \u521b\u5efa\u7684\u5143\u7d20\u3002\u8fd4\u56de void\u3002 c.push_front(t) c.emplace_front( args ) \u5728 c \u7684\u5934\u90e8\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a t \u6216\u7531 args \u521b\u5efa\u7684\u5143\u7d20\u3002\u8fd4\u56de void\u3002 c.insert(p, t) c.emplace(p, args ) \u5728\u8fed\u4ee3\u5668 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a t \u6216\u7531 args \u521b\u5efa\u7684\u5143\u7d20\u3002\u8fd4\u56de\u6307\u5411\u65b0\u6dfb\u52a0\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 c.insert(p, n, t) \u5728\u8fed\u4ee3\u5668 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165 n \u4e2a\u503c\u4e3a t \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u6307\u5411\u6dfb\u52a0\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 c.insert(p, b, e) \u5c06\u8fed\u4ee3\u5668 b \u548c e \u4e4b\u95f4\u7684\u5143\u7d20\u63d2\u5165\u5230 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u3002b \u548c e \u4e0d\u80fd\u6307\u5411 c \u4e2d\u5143\u7d20\u3002 c.insert(p, i1) i1 \u662f\u4e00\u4e2a\u82b1\u62ec\u53f7\u5217\u8868\uff0c\u63d2\u5165\u5230 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u3002 \u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u6539\u53d8\u5bb9\u5668\u5927\u5c0f\uff0c array \u4e0d\u652f\u6301\uff1b forward_list \u6709\u81ea\u5df1\u4e13\u6709\u7684 emplace \u548c insert \uff1b forward_list \u4e0d\u652f\u6301 push_back \u548c emplace_back \uff1b vector \u548c string \u4e0d\u652f\u6301 push_front \u548c emplace_front \uff1b emplace \u662f\u901a\u8fc7 args \u6784\u9020\u4e00\u4e2a\u5bb9\u5668\u5185\u7c7b\u578b\u7684\u5143\u7d20\u3002 (2). \u5220\u9664\u64cd\u4f5c delete c.pop_back() \u5220\u9664 c \u4e2d\u5c3e\u5143\u7d20\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002\u8fd4\u56de void\u3002 c.pop_front() \u5220\u9664 c \u4e2d\u9996\u5143\u7d20\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002\u8fd4\u56de void\u3002 c.erase(p) c.emplace(p, args ) \u5220\u9664\u8fed\u4ee3\u5668 p \u6307\u5411\u7684\u5143\u7d20\u3002\u8fd4\u56de\u5220\u9664\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u679c p \u662f\u5c3e\u540e\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c.erase(b, e) \u5220\u9664\u8fed\u4ee3\u5668\u8303\u56f4 b ~ e \u7684\u5143\u7d20\u3002 c.clear() \u5220\u9664 c \u4e2d\u6240\u6709\u5143\u7d20\u3002 \u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u6539\u53d8\u5bb9\u5668\u5927\u5c0f\uff0c array \u4e0d\u652f\u6301\uff1b forward_list \u6709\u81ea\u5df1\u4e13\u6709\u7684 erase \uff1b forward_list \u4e0d\u652f\u6301 pop_back \uff1b vector \u548c string \u4e0d\u652f\u6301 pop_front \uff1b (3). \u8bbf\u95ee\u5143\u7d20 access c.front() \u8fd4\u56de c \u4e2d\u9996\u5143\u7d20\u7684\u5f15\u7528\uff0c\u5373 *c.begin()\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c.back() \u8fd4\u56de c \u4e2d\u5c3e\u5143\u7d20\u7684\u5f15\u7528\uff0c\u5373 *c.end()\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c[n] \u8fd4\u56de c \u4e2d\u4e0b\u6807\u4e3a n \u7684\u5143\u7d20\u7684\u5f15\u7528\uff0cn \u65e0\u7b26\u53f7\u3002\u82e5 n >= c.size()\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c.at(n) \u8fd4\u56de c \u4e2d\u4e0b\u6807\u4e3a n \u7684\u5143\u7d20\u7684\u5f15\u7528\uff0cn \u65e0\u7b26\u53f7\u3002\u82e5 n >= c.size()\uff0c\u5219\u629b\u51fa out_of_range \u5f02\u5e38\u3002 (4). \u7279\u6b8a\u7684 forward_list \u64cd\u4f5c \u2003\u7531\u4e8e\u5355\u5411\u94fe\u8868\u65e0\u6cd5\u76f4\u63a5\u83b7\u53d6\u524d\u9a71\uff0c\u56e0\u6b64 forward_list \u5e76\u672a\u5b9a\u4e49 insert\u3001emplace \u548c erase \uff0c\u800c\u662f\u5b9a\u4e49\u4e86 insert_after \u3001 emplace_after \u548c erase_after \u3002\u4e3a\u4e86\u652f\u6301\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5b83\u8fd8\u5b9a\u4e49\u4e86 before_begin \uff0c\u8fd4\u56de\u4e00\u4e2a\u9996\u524d\u8fed\u4ee3\u5668\u3002 special operations for forward_list lst.before_begin() lst.cbefore_begin() lst.insert_after(p, t) lst.insert_after(p, n, t) lst.insert_after(p, b, e) lst.insert_after(p, i1) lst.emplace_after(p, args ) lst.erase_after(p) lst.erase_after(b, e) (5). \u6539\u53d8\u5927\u5c0f resize c.resize(n) \u8c03\u6574 c \u7684\u5927\u5c0f\u4e3a n\u3002\u82e5 n < c.size()\uff0c\u5219\u591a\u51fa\u7684\u5143\u7d20\u88ab\u4e22\u5f03\u3002\u82e5\u5fc5\u987b\u6dfb\u52a0\u65b0\u5143\u7d20\uff0c\u5219\u5fc5\u987b\u8fdb\u884c\u503c\u521d\u59cb\u5316\u3002 c.resize(n, t) \u65b0\u6dfb\u52a0\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u503c t\u3002 array \u4e0d\u652f\u6301\u3002 3. \u907f\u514d\u8fed\u4ee3\u5668\u5931\u6548 \u5bb9\u5668\u7684\u589e\u52a0\u5143\u7d20\u3001\u5220\u9664\u5143\u7d20\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6307\u5411\u5bb9\u5668\u5143\u7d20\u7684 \u2460 \u6307\u9488\u3001\u2461 \u5f15\u7528\u6216 \u2462 \u8fed\u4ee3\u5668\u5931\u6548\uff0c\u8fdb\u800c\u5bfc\u81f4\u4e25\u91cd\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u3002 vector / string +\uff1a\u82e5\u5b58\u50a8\u7a7a\u95f4\u91cd\u65b0\u5206\u914d\uff0c\u5219 \u2460\u2461\u2462 \u5747\u5931\u6548\u3002\u5982\u679c\u672a\u91cd\u65b0\u5206\u914d\uff0c\u6307\u5411\u63d2\u5165\u4f4d\u7f6e\u4e4b\u524d\u7684 \u2460\u2461\u2462 \u4ecd\u6709\u6548\uff0c\u63d2\u5165\u4f4d\u7f6e\u540e\u7684 \u2460\u2461\u2462 \u5931\u6548\uff1b -\uff1a\u6307\u5411\u88ab\u5220\u5143\u7d20\u4e4b\u524d\u7684 \u2460\u2461\u2462 \u4ecd\u6709\u6548\u3002\u5c3e\u540e\u8fed\u4ee3\u5668\u603b\u662f\u5931\u6548\u3002 deque +\uff1a\u63d2\u5165\u5230\u9996\u5c3e\u4e4b\u5916\u7684\u4efb\u4f55\u4f4d\u7f6e\u4f1a\u5bfc\u81f4 \u2460\u2461\u2462 \u5931\u6548\uff1b\u5982\u679c\u662f\u9996\u5c3e\u4f4d\u7f6e\uff0c\u5219 \u2462 \u5931\u6548\uff0c\u2460\u2461 \u6709\u6548\uff1b -\uff1a\u5220\u9664\u9996\u5c3e\u4e4b\u5916\u7684\u5143\u7d20\u4f1a\u5bfc\u81f4\u9664\u4e86\u88ab\u5220\u5143\u7d20\u7684 \u2460\u2461\u2462 \u5931\u6548\uff1b\u5220\u9664\u5c3e\u5143\u7d20\u4ec5\u5bfc\u81f4\u5c3e\u540e\u8fed\u4ee3\u5668\u5931\u6548\uff1b\u5220\u9664\u9996\u5143\u7d20 \u2460\u2461\u2462 \u4e0d\u53d7\u5f71\u54cd\u3002 list / forward_list +\uff1a\u90fd\u6709\u6548\uff1b -\uff1a\u90fd\u6709\u6548\u3002 e.g. \u2460 \u5229\u7528\u8fd4\u56de\u503c\u4fdd\u5b58\u8fed\u4ee3\u5668 1 2 3 4 5 6 7 8 9 10 11 /* \u590d\u5236\u5947\u6570\u5143\u7d20\uff0c\u5220\u9664\u5076\u6570\u5143\u7d20 */ vector < int > integers = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; auto iter = integers . begin (); while ( iter != integers . end ()) { if ( * iter % 2 ) { iter = integers . insert ( iter , * iter ); iter += 2 ; } else { iter = integers . erase ( iter ); } } e.g. \u2461 \u4e0d\u8981\u4fdd\u5b58 end \u6dfb\u52a0/\u5220\u9664 vector \u6216 string \u7684\u5143\u7d20\uff0c\u6216\u5728 deque \u4e2d\u67d0\u4e9b\u4f4d\u7f6e\u6dfb\u52a0/\u5220\u9664\uff0c\u5c3e\u540e\u8fed\u4ee3\u5668\u603b\u662f\u4f1a\u5931\u6548\u3002\u56e0\u6b64 end() \u5e94\u8be5\u88ab\u53cd\u590d\u8c03\u7528\uff0c\u8fd9\u4e5f\u662f C++ \u6807\u51c6\u5e93\u7684 end() \u5f88\u5feb\u7684\u4e00\u90e8\u5206\u539f\u56e0\u3002 1 2 3 4 5 6 7 /* \u5728\u6bcf\u4e2a\u5143\u7d20\u540e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 */ auto begin = v . begin (); while ( begin != v . end ()) { ++ begin ; begin = v . insert ( begin , 42 ); ++ begin ; }","title":"2.sequential container"},{"location":"3/3.1/#1","text":"type of sequence containers vector \u53ef\u53d8\u5927\u5c0f\u6570\u7ec4\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\u3002\u5728\u5c3e\u90e8\u4e4b\u5916\u7684\u4f4d\u7f6e\u63d2\u5165\u3001\u5220\u9664\u5143\u7d20\u6162\u3002 deque \u53cc\u7aef\u961f\u5217\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\u3002\u5728\u5934\u5c3e\u63d2\u5165\u5220\u9664\u5f88\u5feb\u3002 list \u53cc\u5411\u94fe\u8868\u3002\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u90fd\u5f88\u5feb\u3002 forward_list \u5355\u5411\u94fe\u8868\u3002\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\u3002\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u90fd\u5f88\u5feb\u3002 array \u56fa\u5b9a\u5927\u5c0f\u6570\u7ec4\u3002\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\u3002\u4e0d\u80fd\u6dfb\u52a0\u3001\u5220\u9664\u5143\u7d20\u3002 string \u4e13\u7528\u4e8e\u4fdd\u5b58\u5b57\u7b26\u7684 vector \u9009\u62e9\u5bb9\u5668\u7684\u57fa\u672c\u539f\u5219\uff1a \u5c3d\u91cf\u4f7f\u7528 vector \uff1b \u5982\u679c\u6709\u5f88\u591a\u5c0f\u5143\u7d20\u4e14\u7a7a\u95f4\u5f88\u91cd\u8981\uff0c\u5219\u4e0d\u7528 list \u548c forward_list \uff1b \u5982\u679c\u8981\u6c42\u4e2d\u95f4\u63d2\u5165\u5143\u7d20\uff0c\u5219\u4f7f\u7528 list \u548c forward_list \uff1b \u5982\u679c\u8981\u6c42\u5934\u5c3e\u63d2\u5165\u5143\u7d20\uff0c\u5219\u4f7f\u7528 deque \uff1b \u5982\u679c\u53ea\u5728\u8f93\u5165\u65f6\u9700\u8981\u4e2d\u95f4\u63d2\u5165\u5143\u7d20\uff0c\u5219\u5c3d\u91cf\u5148\u5c3e\u90e8\u8ffd\u52a0\u518d\u5904\u7406\u6570\u636e\uff1b\u5982\u679c\u65e0\u6cd5\u907f\u514d\uff0c\u5219\u5148\u8bfb\u5165\u5230 list \uff0c\u518d\u62f7\u8d1d\u5230 vector \uff1b \u5982\u679c\u65e2\u9700\u8981\u968f\u673a\u8bbf\u95ee\uff0c\u53c8\u9700\u8981\u4e2d\u95f4\u4f4d\u7f6e\u63d2\u5165\uff0c\u5219\u4ee5\u5e94\u7528\u4e2d\u5360\u4e3b\u5bfc\u5730\u4f4d\u7684\u64cd\u4f5c\u4e3a\u4e2d\u5fc3\u8003\u8651\u6298\u4e2d\u3002","title":"1. \u987a\u5e8f\u5bb9\u5668\u6982\u8ff0"},{"location":"3/3.1/#2","text":"","title":"2. \u987a\u5e8f\u5bb9\u5668\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"3/3.1/#1_1","text":"insert c.push_back(t) c.emplace_back( args ) \u5728 c \u7684\u5c3e\u90e8\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a t \u6216\u7531 args \u521b\u5efa\u7684\u5143\u7d20\u3002\u8fd4\u56de void\u3002 c.push_front(t) c.emplace_front( args ) \u5728 c \u7684\u5934\u90e8\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a t \u6216\u7531 args \u521b\u5efa\u7684\u5143\u7d20\u3002\u8fd4\u56de void\u3002 c.insert(p, t) c.emplace(p, args ) \u5728\u8fed\u4ee3\u5668 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u521b\u5efa\u4e00\u4e2a\u503c\u4e3a t \u6216\u7531 args \u521b\u5efa\u7684\u5143\u7d20\u3002\u8fd4\u56de\u6307\u5411\u65b0\u6dfb\u52a0\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 c.insert(p, n, t) \u5728\u8fed\u4ee3\u5668 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u63d2\u5165 n \u4e2a\u503c\u4e3a t \u7684\u5143\u7d20\uff0c\u8fd4\u56de\u6307\u5411\u6dfb\u52a0\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 c.insert(p, b, e) \u5c06\u8fed\u4ee3\u5668 b \u548c e \u4e4b\u95f4\u7684\u5143\u7d20\u63d2\u5165\u5230 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u3002b \u548c e \u4e0d\u80fd\u6307\u5411 c \u4e2d\u5143\u7d20\u3002 c.insert(p, i1) i1 \u662f\u4e00\u4e2a\u82b1\u62ec\u53f7\u5217\u8868\uff0c\u63d2\u5165\u5230 p \u6307\u5411\u7684\u5143\u7d20\u4e4b\u524d\u3002 \u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u6539\u53d8\u5bb9\u5668\u5927\u5c0f\uff0c array \u4e0d\u652f\u6301\uff1b forward_list \u6709\u81ea\u5df1\u4e13\u6709\u7684 emplace \u548c insert \uff1b forward_list \u4e0d\u652f\u6301 push_back \u548c emplace_back \uff1b vector \u548c string \u4e0d\u652f\u6301 push_front \u548c emplace_front \uff1b emplace \u662f\u901a\u8fc7 args \u6784\u9020\u4e00\u4e2a\u5bb9\u5668\u5185\u7c7b\u578b\u7684\u5143\u7d20\u3002","title":"(1). \u6dfb\u52a0\u64cd\u4f5c"},{"location":"3/3.1/#2_1","text":"delete c.pop_back() \u5220\u9664 c \u4e2d\u5c3e\u5143\u7d20\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002\u8fd4\u56de void\u3002 c.pop_front() \u5220\u9664 c \u4e2d\u9996\u5143\u7d20\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002\u8fd4\u56de void\u3002 c.erase(p) c.emplace(p, args ) \u5220\u9664\u8fed\u4ee3\u5668 p \u6307\u5411\u7684\u5143\u7d20\u3002\u8fd4\u56de\u5220\u9664\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u679c p \u662f\u5c3e\u540e\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c.erase(b, e) \u5220\u9664\u8fed\u4ee3\u5668\u8303\u56f4 b ~ e \u7684\u5143\u7d20\u3002 c.clear() \u5220\u9664 c \u4e2d\u6240\u6709\u5143\u7d20\u3002 \u56e0\u4e3a\u8fd9\u4e9b\u64cd\u4f5c\u4f1a\u6539\u53d8\u5bb9\u5668\u5927\u5c0f\uff0c array \u4e0d\u652f\u6301\uff1b forward_list \u6709\u81ea\u5df1\u4e13\u6709\u7684 erase \uff1b forward_list \u4e0d\u652f\u6301 pop_back \uff1b vector \u548c string \u4e0d\u652f\u6301 pop_front \uff1b","title":"(2). \u5220\u9664\u64cd\u4f5c"},{"location":"3/3.1/#3","text":"access c.front() \u8fd4\u56de c \u4e2d\u9996\u5143\u7d20\u7684\u5f15\u7528\uff0c\u5373 *c.begin()\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c.back() \u8fd4\u56de c \u4e2d\u5c3e\u5143\u7d20\u7684\u5f15\u7528\uff0c\u5373 *c.end()\u3002\u82e5 c \u4e3a\u7a7a\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c[n] \u8fd4\u56de c \u4e2d\u4e0b\u6807\u4e3a n \u7684\u5143\u7d20\u7684\u5f15\u7528\uff0cn \u65e0\u7b26\u53f7\u3002\u82e5 n >= c.size()\uff0c\u5219\u51fd\u6570\u884c\u4e3a\u672a\u5b9a\u4e49\u3002 c.at(n) \u8fd4\u56de c \u4e2d\u4e0b\u6807\u4e3a n \u7684\u5143\u7d20\u7684\u5f15\u7528\uff0cn \u65e0\u7b26\u53f7\u3002\u82e5 n >= c.size()\uff0c\u5219\u629b\u51fa out_of_range \u5f02\u5e38\u3002","title":"(3). \u8bbf\u95ee\u5143\u7d20"},{"location":"3/3.1/#4-forward_list","text":"\u7531\u4e8e\u5355\u5411\u94fe\u8868\u65e0\u6cd5\u76f4\u63a5\u83b7\u53d6\u524d\u9a71\uff0c\u56e0\u6b64 forward_list \u5e76\u672a\u5b9a\u4e49 insert\u3001emplace \u548c erase \uff0c\u800c\u662f\u5b9a\u4e49\u4e86 insert_after \u3001 emplace_after \u548c erase_after \u3002\u4e3a\u4e86\u652f\u6301\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5b83\u8fd8\u5b9a\u4e49\u4e86 before_begin \uff0c\u8fd4\u56de\u4e00\u4e2a\u9996\u524d\u8fed\u4ee3\u5668\u3002 special operations for forward_list lst.before_begin() lst.cbefore_begin() lst.insert_after(p, t) lst.insert_after(p, n, t) lst.insert_after(p, b, e) lst.insert_after(p, i1) lst.emplace_after(p, args ) lst.erase_after(p) lst.erase_after(b, e)","title":"(4). \u7279\u6b8a\u7684 forward_list \u64cd\u4f5c"},{"location":"3/3.1/#5","text":"resize c.resize(n) \u8c03\u6574 c \u7684\u5927\u5c0f\u4e3a n\u3002\u82e5 n < c.size()\uff0c\u5219\u591a\u51fa\u7684\u5143\u7d20\u88ab\u4e22\u5f03\u3002\u82e5\u5fc5\u987b\u6dfb\u52a0\u65b0\u5143\u7d20\uff0c\u5219\u5fc5\u987b\u8fdb\u884c\u503c\u521d\u59cb\u5316\u3002 c.resize(n, t) \u65b0\u6dfb\u52a0\u5143\u7d20\u521d\u59cb\u5316\u4e3a\u503c t\u3002 array \u4e0d\u652f\u6301\u3002","title":"(5). \u6539\u53d8\u5927\u5c0f"},{"location":"3/3.1/#3_1","text":"\u5bb9\u5668\u7684\u589e\u52a0\u5143\u7d20\u3001\u5220\u9664\u5143\u7d20\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6307\u5411\u5bb9\u5668\u5143\u7d20\u7684 \u2460 \u6307\u9488\u3001\u2461 \u5f15\u7528\u6216 \u2462 \u8fed\u4ee3\u5668\u5931\u6548\uff0c\u8fdb\u800c\u5bfc\u81f4\u4e25\u91cd\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u3002 vector / string +\uff1a\u82e5\u5b58\u50a8\u7a7a\u95f4\u91cd\u65b0\u5206\u914d\uff0c\u5219 \u2460\u2461\u2462 \u5747\u5931\u6548\u3002\u5982\u679c\u672a\u91cd\u65b0\u5206\u914d\uff0c\u6307\u5411\u63d2\u5165\u4f4d\u7f6e\u4e4b\u524d\u7684 \u2460\u2461\u2462 \u4ecd\u6709\u6548\uff0c\u63d2\u5165\u4f4d\u7f6e\u540e\u7684 \u2460\u2461\u2462 \u5931\u6548\uff1b -\uff1a\u6307\u5411\u88ab\u5220\u5143\u7d20\u4e4b\u524d\u7684 \u2460\u2461\u2462 \u4ecd\u6709\u6548\u3002\u5c3e\u540e\u8fed\u4ee3\u5668\u603b\u662f\u5931\u6548\u3002 deque +\uff1a\u63d2\u5165\u5230\u9996\u5c3e\u4e4b\u5916\u7684\u4efb\u4f55\u4f4d\u7f6e\u4f1a\u5bfc\u81f4 \u2460\u2461\u2462 \u5931\u6548\uff1b\u5982\u679c\u662f\u9996\u5c3e\u4f4d\u7f6e\uff0c\u5219 \u2462 \u5931\u6548\uff0c\u2460\u2461 \u6709\u6548\uff1b -\uff1a\u5220\u9664\u9996\u5c3e\u4e4b\u5916\u7684\u5143\u7d20\u4f1a\u5bfc\u81f4\u9664\u4e86\u88ab\u5220\u5143\u7d20\u7684 \u2460\u2461\u2462 \u5931\u6548\uff1b\u5220\u9664\u5c3e\u5143\u7d20\u4ec5\u5bfc\u81f4\u5c3e\u540e\u8fed\u4ee3\u5668\u5931\u6548\uff1b\u5220\u9664\u9996\u5143\u7d20 \u2460\u2461\u2462 \u4e0d\u53d7\u5f71\u54cd\u3002 list / forward_list +\uff1a\u90fd\u6709\u6548\uff1b -\uff1a\u90fd\u6709\u6548\u3002","title":"3. \u907f\u514d\u8fed\u4ee3\u5668\u5931\u6548"},{"location":"3/3.1/#eg-1","text":"1 2 3 4 5 6 7 8 9 10 11 /* \u590d\u5236\u5947\u6570\u5143\u7d20\uff0c\u5220\u9664\u5076\u6570\u5143\u7d20 */ vector < int > integers = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; auto iter = integers . begin (); while ( iter != integers . end ()) { if ( * iter % 2 ) { iter = integers . insert ( iter , * iter ); iter += 2 ; } else { iter = integers . erase ( iter ); } }","title":"e.g. \u2460 \u5229\u7528\u8fd4\u56de\u503c\u4fdd\u5b58\u8fed\u4ee3\u5668"},{"location":"3/3.1/#eg-2-end","text":"\u6dfb\u52a0/\u5220\u9664 vector \u6216 string \u7684\u5143\u7d20\uff0c\u6216\u5728 deque \u4e2d\u67d0\u4e9b\u4f4d\u7f6e\u6dfb\u52a0/\u5220\u9664\uff0c\u5c3e\u540e\u8fed\u4ee3\u5668\u603b\u662f\u4f1a\u5931\u6548\u3002\u56e0\u6b64 end() \u5e94\u8be5\u88ab\u53cd\u590d\u8c03\u7528\uff0c\u8fd9\u4e5f\u662f C++ \u6807\u51c6\u5e93\u7684 end() \u5f88\u5feb\u7684\u4e00\u90e8\u5206\u539f\u56e0\u3002 1 2 3 4 5 6 7 /* \u5728\u6bcf\u4e2a\u5143\u7d20\u540e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 */ auto begin = v . begin (); while ( begin != v . end ()) { ++ begin ; begin = v . insert ( begin , 42 ); ++ begin ; }","title":"e.g. \u2461 \u4e0d\u8981\u4fdd\u5b58 end"},{"location":"3/3.2/","text":"1. \u5b9a\u4e49\u4e0e\u521d\u59cb\u5316 C++ \u4e2d\u65e2\u6709\u7c7b\u6a21\u677f\uff0c\u53c8\u6709\u51fd\u6570\u6a21\u677f\uff0c\u5176\u4e2d vector \u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\u3002 ways of initializing a vector vector<T> v1; \u9ed8\u8ba4\u521d\u59cb\u5316\uff0c\u7a7a vector vector<T> v2(v1); v2 \u5305\u542b v1 \u4e2d\u6240\u6709\u7684\u526f\u672c\uff0c\u4e24\u8005\u7c7b\u578b\u5fc5\u987b\u76f8\u540c vector<T> v2 = v1; \u7b49\u4ef7\u4e8e v2(v1) vector<T> v3(n, val); \u5305\u542b n \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u7684\u503c\u4e3a val vector<T> v4(n); \u5305\u542b n \u4e2a\u6267\u884c\u4e86\u503c\u521d\u59cb\u5316\u7684\u5bf9\u8c61\uff0cint \u81ea\u52a8\u8bbe\u4e3a 0\uff0c\u5982\u679c\u662f\u7c7b\u5219\u7531\u7c7b\u9ed8\u8ba4\u521d\u59cb\u5316 vector<T> v5{a, b, c, ...} \u6309\u7167\u82b1\u62ec\u53f7\u4e2d\u7684\u503c\u521d\u59cb\u5316 vector<T> v5 = {a, b, c, ...} \u4e0e\u4e0a\u9762\u7684\u60c5\u51b5\u7b49\u4ef7 2. \u64cd\u4f5c operations of vector v.empty() \u662f\u5426\u4e3a\u7a7a v.size() \u5143\u7d20\u4e2a\u6570 v.push_back(t) \u5c3e\u7aef\u6dfb\u52a0\u5143\u7d20 v[n] \u53d6 v \u4e2d\u7b2c n \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u7684\u5f15\u7528 v1 = v2 \u7528 v2 \u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u66ff\u6362 v1 v1 = {a, b, c, ...} \u7528\u5217\u8868\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u66ff\u6362 v1 == v2 true: \u5f53\u4e14\u4ec5\u5f53\u5143\u7d20\u6570\u91cf\u76f8\u540c\u4e14\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\u503c\u76f8\u540c (\u5143\u7d20\u53ef\u6bd4\u8f83) >, >=, <, <= \u5b57\u5178\u5e8f\u6bd4\u8f83 \u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u4e0d\u80fd\u518d for-each \u5faa\u73af\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\uff0c\u56e0\u4e3a\u5b83\u9884\u5b58\u4e86\u5bb9\u5668\u7684\u5927\u5c0f\uff1b \u8bbf\u95ee size_type \u9700\u6b63\u786e\u6307\u660e\u7c7b\u578b\uff0c\u5982 vector<int>::size_type \uff1b \u4e0d\u80fd\u901a\u8fc7\u4e0b\u6807\u6dfb\u52a0\u672a\u5f00\u8f9f\u7a7a\u95f4\u7684\u5143\u7d20\u3002 3. Vector \u5185\u5b58\u5206\u914d \u2003\u4e3a\u4e86\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\uff0c vector \u5bf9\u8c61\u5b58\u50a8\u5728\u4e00\u5757\u8fde\u7eed\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\u968f\u7740\u5bb9\u5668\u5927\u5c0f\u7684\u4e0d\u65ad\u6539\u53d8\uff0c\u5176\u5730\u5740\u7a7a\u95f4\u4e5f\u8981\u91cd\u65b0\u5206\u914d\uff0c\u4ee5\u4e0b\u63a5\u53e3\u4f53\u73b0\u4e86\u8fd9\u4e2a\u7279\u6027\u3002 manage the size of container c.capacity() \u4e0d\u91cd\u65b0\u5206\u914d\u5185\u5b58\u7684\u8bdd\uff0c\u53ef\u4ee5\u4fdd\u5b58\u591a\u5c11\u5143\u7d20 c.reserve(n) \u5206\u914d\u81f3\u5c11\u80fd\u5bb9\u7eb3 n \u4e2a\u5143\u7d20\u7684\u5185\u5b58\u7a7a\u95f4 c.shrink_to_left() \u5c06 capacity() \u51cf\u5c11\u4e3a\u4e0e size() \u7b49\u540c\u7684\u5927\u5c0f \u53ea\u6709\u5728\u63d2\u5165\u6216 resize \u65f6\uff0c\u5bb9\u5668\u5927\u5c0f\u8fbe\u5230 capacity \uff0c\u5185\u5b58\u624d\u4f1a\u88ab\u91cd\u65b0\u5206\u914d\uff0c\u5206\u914d\u591a\u5c11\u53d6\u51b3\u4e8e\u5177\u4f53\u5b9e\u73b0\u3002\u5b9e\u9645\u4e2d\u53ef\u6839\u636e\u5177\u4f53\u7684\u60c5\u51b5\u51cf\u5c11\u9891\u7e41\u7684\u5185\u5b58\u5206\u914d\u3002","title":"3.std::vector"},{"location":"3/3.2/#1","text":"C++ \u4e2d\u65e2\u6709\u7c7b\u6a21\u677f\uff0c\u53c8\u6709\u51fd\u6570\u6a21\u677f\uff0c\u5176\u4e2d vector \u662f\u4e00\u4e2a\u7c7b\u6a21\u677f\u3002 ways of initializing a vector vector<T> v1; \u9ed8\u8ba4\u521d\u59cb\u5316\uff0c\u7a7a vector vector<T> v2(v1); v2 \u5305\u542b v1 \u4e2d\u6240\u6709\u7684\u526f\u672c\uff0c\u4e24\u8005\u7c7b\u578b\u5fc5\u987b\u76f8\u540c vector<T> v2 = v1; \u7b49\u4ef7\u4e8e v2(v1) vector<T> v3(n, val); \u5305\u542b n \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u7684\u503c\u4e3a val vector<T> v4(n); \u5305\u542b n \u4e2a\u6267\u884c\u4e86\u503c\u521d\u59cb\u5316\u7684\u5bf9\u8c61\uff0cint \u81ea\u52a8\u8bbe\u4e3a 0\uff0c\u5982\u679c\u662f\u7c7b\u5219\u7531\u7c7b\u9ed8\u8ba4\u521d\u59cb\u5316 vector<T> v5{a, b, c, ...} \u6309\u7167\u82b1\u62ec\u53f7\u4e2d\u7684\u503c\u521d\u59cb\u5316 vector<T> v5 = {a, b, c, ...} \u4e0e\u4e0a\u9762\u7684\u60c5\u51b5\u7b49\u4ef7","title":"1. \u5b9a\u4e49\u4e0e\u521d\u59cb\u5316"},{"location":"3/3.2/#2","text":"operations of vector v.empty() \u662f\u5426\u4e3a\u7a7a v.size() \u5143\u7d20\u4e2a\u6570 v.push_back(t) \u5c3e\u7aef\u6dfb\u52a0\u5143\u7d20 v[n] \u53d6 v \u4e2d\u7b2c n \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u7684\u5f15\u7528 v1 = v2 \u7528 v2 \u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u66ff\u6362 v1 v1 = {a, b, c, ...} \u7528\u5217\u8868\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u66ff\u6362 v1 == v2 true: \u5f53\u4e14\u4ec5\u5f53\u5143\u7d20\u6570\u91cf\u76f8\u540c\u4e14\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\u503c\u76f8\u540c (\u5143\u7d20\u53ef\u6bd4\u8f83) >, >=, <, <= \u5b57\u5178\u5e8f\u6bd4\u8f83 \u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u4e0d\u80fd\u518d for-each \u5faa\u73af\u4e2d\u6dfb\u52a0\u6216\u5220\u9664\u5143\u7d20\uff0c\u56e0\u4e3a\u5b83\u9884\u5b58\u4e86\u5bb9\u5668\u7684\u5927\u5c0f\uff1b \u8bbf\u95ee size_type \u9700\u6b63\u786e\u6307\u660e\u7c7b\u578b\uff0c\u5982 vector<int>::size_type \uff1b \u4e0d\u80fd\u901a\u8fc7\u4e0b\u6807\u6dfb\u52a0\u672a\u5f00\u8f9f\u7a7a\u95f4\u7684\u5143\u7d20\u3002","title":"2. \u64cd\u4f5c"},{"location":"3/3.2/#3-vector","text":"\u4e3a\u4e86\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\uff0c vector \u5bf9\u8c61\u5b58\u50a8\u5728\u4e00\u5757\u8fde\u7eed\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002\u968f\u7740\u5bb9\u5668\u5927\u5c0f\u7684\u4e0d\u65ad\u6539\u53d8\uff0c\u5176\u5730\u5740\u7a7a\u95f4\u4e5f\u8981\u91cd\u65b0\u5206\u914d\uff0c\u4ee5\u4e0b\u63a5\u53e3\u4f53\u73b0\u4e86\u8fd9\u4e2a\u7279\u6027\u3002 manage the size of container c.capacity() \u4e0d\u91cd\u65b0\u5206\u914d\u5185\u5b58\u7684\u8bdd\uff0c\u53ef\u4ee5\u4fdd\u5b58\u591a\u5c11\u5143\u7d20 c.reserve(n) \u5206\u914d\u81f3\u5c11\u80fd\u5bb9\u7eb3 n \u4e2a\u5143\u7d20\u7684\u5185\u5b58\u7a7a\u95f4 c.shrink_to_left() \u5c06 capacity() \u51cf\u5c11\u4e3a\u4e0e size() \u7b49\u540c\u7684\u5927\u5c0f \u53ea\u6709\u5728\u63d2\u5165\u6216 resize \u65f6\uff0c\u5bb9\u5668\u5927\u5c0f\u8fbe\u5230 capacity \uff0c\u5185\u5b58\u624d\u4f1a\u88ab\u91cd\u65b0\u5206\u914d\uff0c\u5206\u914d\u591a\u5c11\u53d6\u51b3\u4e8e\u5177\u4f53\u5b9e\u73b0\u3002\u5b9e\u9645\u4e2d\u53ef\u6839\u636e\u5177\u4f53\u7684\u60c5\u51b5\u51cf\u5c11\u9891\u7e41\u7684\u5185\u5b58\u5206\u914d\u3002","title":"3. Vector \u5185\u5b58\u5206\u914d"},{"location":"3/3.3/","text":"1. begin \u548c end \u5728 C++ \u4e2d\uff0c\u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0c\u8fed\u4ee3\u5668\u662f\u5bb9\u5668\u5185\u90e8\u7684\u6210\u5458\u3002\u5176\u57fa\u672c\u7528\u6cd5\u4e3a\uff1a 1 2 3 string s ( \"hello world\" ); for ( auto it = s . begin (); it != s . end (); ++ it ) * it = toupper ( * it ); \u5176\u4e2d begin \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c end \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u4e0d\u88ab\u5728\u610f\u3002\u5b9e\u9645\u4e0a\uff0c begin \u548c end \u8fd4\u56de\u7684\u5177\u4f53\u7c7b\u578b\u7531\u5bf9\u8c61\u662f\u5426\u662f\u5e38\u91cf\u51b3\u5b9a\u3002\u5982\u679c\u662f\u5e38\u91cf\u5219\u8fd4\u56de vector<int>::const_iterator \uff0c\u5426\u5219\u4e3a vertor<int>::iterator \u3002\u5982\u679c\u5e0c\u671b\u5bf9\u4e8e\u975e\u5e38\u91cf\u5bf9\u8c61\u8bbe\u7f6e\u901a\u8fc7\u8fed\u4ee3\u5668\u53ea\u8bfb\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 C++11 \u5f15\u5165\u7684\u51fd\u6570 cbegin \u548c cend \u3002 2. \u8fed\u4ee3\u5668\u64cd\u4f5c operators of iterator in std containers *iter \u8fd4\u56de\u8fed\u4ee3\u5668 iter \u6240\u6307\u5143\u7d20\u7684\u5f15\u7528 iter->mem \u89e3\u5f15\u7528 iter \u5e76\u83b7\u53d6\u8be5\u5143\u7d20\u540d\u4e3a mem \u7684\u6210\u5458\uff0c\u7b49\u4ef7\u4e8e (*iter).mem ++iter / --iter \u79fb\u52a8 iter1 == iter2 \u4e24\u8fed\u4ee3\u5668\u6307\u5411\u540c\u4e00\u4e2a\u5143\u7d20 \u6216 \u5b83\u4eec\u662f\u540c\u4e00\u4e2a\u5bb9\u5668\u7684 off-the-end iterator\uff0c\u5219\u76f8\u7b49 C++ \u4e2d\u5e38\u4f7f\u7528 != \u5224\u65ad\u5faa\u73af\u6761\u4ef6\uff0c\u56e0\u4e3a\u5b83\u517c\u5bb9\u5927\u591a\u6570\u6807\u51c6\u5e93\u7c7b\uff1b \u5bb9\u5668\u7684\u67d0\u4e9b\u589e\u5220\u5143\u7d20\u7684\u64cd\u4f5c\u53ef\u80fd\u4f1a\u4f7f\u8fed\u4ee3\u5668\u5931\u6548\u3002 3. \u8fed\u4ee3\u5668\u8fd0\u7b97 string \u548c vector \u7684\u8fed\u4ee3\u5668\u652f\u6301\u66f4\u591a\u7684\u64cd\u4f5c\u7b26\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u88ab\u79f0\u4e3a\u8fed\u4ee3\u5668\u8fd0\u7b97 ( iterator arithmetic )\u3002 operators of iterator in std containers iter + n / iter - n \u79fb\u52a8 iter += n / iter -= n \u590d\u5408\u8d4b\u503c iter1 - iter2 \u4e24\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u5fc5\u987b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5bb9\u5668 >, >=, <, <= \u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u5fc5\u987b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5bb9\u5668 \u5176\u4e2d\u4e24\u8fed\u4ee3\u5668\u76f8\u51cf\u5f97\u5230\u7684\u7c7b\u578b\u662f different_type \uff0c\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5728 string \u548c vector \u4e2d\u5747\u88ab\u5b9a\u4e49\u3002 \u4f8b\uff1a 1 2 3 4 5 6 7 8 9 auto l = array . begin (), r = array . end (); auto mid = l + ( r - l ) / 2 ; while ( mid != r && * mid != dest ) { if ( dest < * mid ) r = mid ; else l = mid + 1 ; mid = l + ( r - l ) / 2 ; }","title":"4.iterator"},{"location":"3/3.3/#1-begin-end","text":"\u5728 C++ \u4e2d\uff0c\u548c\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0c\u8fed\u4ee3\u5668\u662f\u5bb9\u5668\u5185\u90e8\u7684\u6210\u5458\u3002\u5176\u57fa\u672c\u7528\u6cd5\u4e3a\uff1a 1 2 3 string s ( \"hello world\" ); for ( auto it = s . begin (); it != s . end (); ++ it ) * it = toupper ( * it ); \u5176\u4e2d begin \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c end \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002 \u2003\u4e00\u822c\u6765\u8bf4\uff0c\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u4e0d\u88ab\u5728\u610f\u3002\u5b9e\u9645\u4e0a\uff0c begin \u548c end \u8fd4\u56de\u7684\u5177\u4f53\u7c7b\u578b\u7531\u5bf9\u8c61\u662f\u5426\u662f\u5e38\u91cf\u51b3\u5b9a\u3002\u5982\u679c\u662f\u5e38\u91cf\u5219\u8fd4\u56de vector<int>::const_iterator \uff0c\u5426\u5219\u4e3a vertor<int>::iterator \u3002\u5982\u679c\u5e0c\u671b\u5bf9\u4e8e\u975e\u5e38\u91cf\u5bf9\u8c61\u8bbe\u7f6e\u901a\u8fc7\u8fed\u4ee3\u5668\u53ea\u8bfb\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 C++11 \u5f15\u5165\u7684\u51fd\u6570 cbegin \u548c cend \u3002","title":"1. begin \u548c end"},{"location":"3/3.3/#2","text":"operators of iterator in std containers *iter \u8fd4\u56de\u8fed\u4ee3\u5668 iter \u6240\u6307\u5143\u7d20\u7684\u5f15\u7528 iter->mem \u89e3\u5f15\u7528 iter \u5e76\u83b7\u53d6\u8be5\u5143\u7d20\u540d\u4e3a mem \u7684\u6210\u5458\uff0c\u7b49\u4ef7\u4e8e (*iter).mem ++iter / --iter \u79fb\u52a8 iter1 == iter2 \u4e24\u8fed\u4ee3\u5668\u6307\u5411\u540c\u4e00\u4e2a\u5143\u7d20 \u6216 \u5b83\u4eec\u662f\u540c\u4e00\u4e2a\u5bb9\u5668\u7684 off-the-end iterator\uff0c\u5219\u76f8\u7b49 C++ \u4e2d\u5e38\u4f7f\u7528 != \u5224\u65ad\u5faa\u73af\u6761\u4ef6\uff0c\u56e0\u4e3a\u5b83\u517c\u5bb9\u5927\u591a\u6570\u6807\u51c6\u5e93\u7c7b\uff1b \u5bb9\u5668\u7684\u67d0\u4e9b\u589e\u5220\u5143\u7d20\u7684\u64cd\u4f5c\u53ef\u80fd\u4f1a\u4f7f\u8fed\u4ee3\u5668\u5931\u6548\u3002","title":"2. \u8fed\u4ee3\u5668\u64cd\u4f5c"},{"location":"3/3.3/#3","text":"string \u548c vector \u7684\u8fed\u4ee3\u5668\u652f\u6301\u66f4\u591a\u7684\u64cd\u4f5c\u7b26\uff0c\u8fd9\u4e9b\u8fd0\u7b97\u88ab\u79f0\u4e3a\u8fed\u4ee3\u5668\u8fd0\u7b97 ( iterator arithmetic )\u3002 operators of iterator in std containers iter + n / iter - n \u79fb\u52a8 iter += n / iter -= n \u590d\u5408\u8d4b\u503c iter1 - iter2 \u4e24\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u5fc5\u987b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5bb9\u5668 >, >=, <, <= \u53c2\u4e0e\u8fd0\u7b97\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\u5fc5\u987b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5bb9\u5668 \u5176\u4e2d\u4e24\u8fed\u4ee3\u5668\u76f8\u51cf\u5f97\u5230\u7684\u7c7b\u578b\u662f different_type \uff0c\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5728 string \u548c vector \u4e2d\u5747\u88ab\u5b9a\u4e49\u3002 \u4f8b\uff1a 1 2 3 4 5 6 7 8 9 auto l = array . begin (), r = array . end (); auto mid = l + ( r - l ) / 2 ; while ( mid != r && * mid != dest ) { if ( dest < * mid ) r = mid ; else l = mid + 1 ; mid = l + ( r - l ) / 2 ; }","title":"3. \u8fed\u4ee3\u5668\u8fd0\u7b97"},{"location":"3/3.4/","text":"1. \u5b9a\u4e49\u4e0e\u521d\u59cb\u5316 ways of initializing a string string s1; \u9ed8\u8ba4\u521d\u59cb\u5316\uff0cs1 \u662f\u4e00\u4e2a\u7a7a\u4e32 string s2(s1); s2 \u662f s1 \u7684\u4e00\u4e2a\u526f\u672c string s2 = s1; \u7b49\u4ef7\u4e8e s2(s1) string s3(\"value\"); s3 \u662f\u9664\u4e86 \"value\" \u6700\u540e\u7684\u7a7a\u5b57\u7b26\u5916\u7684\u526f\u672c string s3 = \"value\"; \u7b49\u4ef7\u4e8e s3(\"value\") string s4(n, 'c'); \u8fde\u7eed n \u4e2a\u5b57\u7b26 'c' \u901a\u8fc7\u7b49\u53f7\u8fdb\u884c\u7684\u521d\u59cb\u5316\u4e3a\u62f7\u8d1d\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u5668\u628a\u7b49\u53f7\u53f3\u4fa7\u7684\u503c\u62f7\u8d1d\u5230\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u4e2d\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u7b49\u53f7\uff0c\u5219\u6267\u884c\u7684\u662f\u76f4\u63a5\u521d\u59cb\u5316\u3002 2. \u64cd\u4f5c operations of string os << s \u5c06 s \u5199\u5165\u8f93\u51fa\u6d41\uff0c\u8fd4\u56de os is << s \u4ece is \u4e2d\u8bfb\u53d6\u5b57\u7b26\u4e32\u8d4b\u7ed9 s\uff0c\u5b57\u7b26\u4e32\u4ee5\u7a7a\u767d\u5206\u9694\uff0c\u8fd4\u56de is getline(is, s) \u4ece is \u4e2d\u8bfb\u53d6\u4e00\u884c\u8d4b\u7ed9 s\uff0c\u8fd4\u56de is s.empty() true/false s[n] \u8fd4\u56de s \u4e2d\u7b2c n \u4e2a\u5b57\u7b26\u7684\u5f15\u7528 s1 + s2 \u8fde\u63a5 s1 = s2 \u7528 s2 \u7684\u526f\u672c\u4ee3\u66ff s1 \u4e2d\u7684\u5185\u5bb9 s1 == s2 \u4fdd\u5b58\u7684\u5b57\u7b26\u5b8c\u5168\u4e00\u6837\uff0c\u5219\u76f8\u7b49\uff1b\u5927\u5c0f\u5199\u654f\u611f >, >=, <, <= (\u7b2c\u4e00\u5bf9\u76f8\u5f02\u5b57\u7b26) \u5b57\u5178\u5e8f\u6bd4\u8f83\uff0c\u5927\u5c0f\u5199\u654f\u611f (1). \u8bfb\u5199 1 2 3 4 5 6 7 8 9 10 string s ; while ( cin >> s ) { cout << s << endl ; } string line ; while ( getline ( cin , line )) { if ( ! line . empty ()) cout << line << endl ; } \u5faa\u73af\u8bfb\u53d6\uff0c\u76f4\u5230\u8bfb\u53d6\u5230\u6d41\u7ed3\u675f\u7b26\u3002\u5728 Windows \u4e0b\u4e3a Ctrl+Z \u3002 (2). string::size_type \u2003 string \u7b49\u6807\u51c6\u5e93\u90fd\u5b9a\u4e49\u4e86\u914d\u5957\u7684\u7c7b\u578b\uff0c\u4f53\u73b0\u4e86\u673a\u5668\u65e0\u5173\u7684\u7279\u6027\u3002\u4f5c\u4e3a s.size() \u7684\u8fd4\u56de\u7c7b\u578b\uff0c string::size_type \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7c7b\u578b\u4e14\u8db3\u591f\u653e\u4e0b\u4efb\u4f55 string \u5bf9\u8c61\u7684\u5927\u5c0f\u3002\u5728 C++11 \u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 auto \u548c decltype \u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\u3002 (3). \u76f8\u52a0 \u6807\u51c6\u5e93\u652f\u6301\u5b57\u7b26\u5b57\u9762\u91cf\u548c\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u8f6c\u6362\u6210 string \u5bf9\u8c61\u3002 1 2 3 4 string s1 = \"hello\" , s2 = \"world\" ; string s3 = s1 + \",\" + s2 + '\\n' ; string s4 = \"hello\" + \",\" + s2 ; // ERROR 3. \u5904\u7406\u5b57\u7b26 \u5728 cctype \u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5904\u7406\u5b57\u7b26\u7684\u51fd\u6570\uff1a functions in cctype isalnum(c) true: c \u662f\u5b57\u6bcd\u6216\u6570\u5b57 isalpha(c) true: c \u662f\u5b57\u6bcd iscntrl(c) true: c \u662f\u63a7\u5236\u5b57\u7b26 isdigit(c) true: c \u662f\u6570\u5b57 isgraph(c) true: c \u4e0d\u662f\u7a7a\u683c\u4f46\u53ef\u6253\u5370 islower(c) / issuper(c) true: c \u662f\u5c0f/\u5927\u5199\u5b57\u6bcd isprint(c) true: c \u662f\u53ef\u6253\u5370\u5b57\u7b26 (c \u662f\u7a7a\u683c\u6216 c \u5177\u6709\u53ef\u89c6\u5316\u5f62\u5f0f) ispunct(c) true: c \u662f\u6807\u70b9\u7b26\u53f7 isspace(c) true: c \u662f\u7a7a\u683c isxdigit(c) true: c \u662f\u5341\u516d\u8fdb\u5236\u6570\u5b57 tolower(c) / toupper(c) \u8f6c\u6362 \u4f8b: 1 2 3 4 5 6 7 8 string s ( \"Hello World!\" ); decltype ( s . size ()) punct_cnt = 0 ; for ( auto & c : s ) { if ( ispunct ( c )) punct_cnt ++ ; c = toupper ( c ); } cout << s << punct_cnt << endl ; \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5fc5\u987b\u901a\u8fc7\u5f15\u7528\u6539\u53d8\u5927\u5c0f\u5199\u3002","title":"5.std::string"},{"location":"3/3.4/#1","text":"ways of initializing a string string s1; \u9ed8\u8ba4\u521d\u59cb\u5316\uff0cs1 \u662f\u4e00\u4e2a\u7a7a\u4e32 string s2(s1); s2 \u662f s1 \u7684\u4e00\u4e2a\u526f\u672c string s2 = s1; \u7b49\u4ef7\u4e8e s2(s1) string s3(\"value\"); s3 \u662f\u9664\u4e86 \"value\" \u6700\u540e\u7684\u7a7a\u5b57\u7b26\u5916\u7684\u526f\u672c string s3 = \"value\"; \u7b49\u4ef7\u4e8e s3(\"value\") string s4(n, 'c'); \u8fde\u7eed n \u4e2a\u5b57\u7b26 'c' \u901a\u8fc7\u7b49\u53f7\u8fdb\u884c\u7684\u521d\u59cb\u5316\u4e3a\u62f7\u8d1d\u521d\u59cb\u5316\uff0c\u7f16\u8bd1\u5668\u628a\u7b49\u53f7\u53f3\u4fa7\u7684\u503c\u62f7\u8d1d\u5230\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u4e2d\u3002\u5982\u679c\u4e0d\u4f7f\u7528\u7b49\u53f7\uff0c\u5219\u6267\u884c\u7684\u662f\u76f4\u63a5\u521d\u59cb\u5316\u3002","title":"1. \u5b9a\u4e49\u4e0e\u521d\u59cb\u5316"},{"location":"3/3.4/#2","text":"operations of string os << s \u5c06 s \u5199\u5165\u8f93\u51fa\u6d41\uff0c\u8fd4\u56de os is << s \u4ece is \u4e2d\u8bfb\u53d6\u5b57\u7b26\u4e32\u8d4b\u7ed9 s\uff0c\u5b57\u7b26\u4e32\u4ee5\u7a7a\u767d\u5206\u9694\uff0c\u8fd4\u56de is getline(is, s) \u4ece is \u4e2d\u8bfb\u53d6\u4e00\u884c\u8d4b\u7ed9 s\uff0c\u8fd4\u56de is s.empty() true/false s[n] \u8fd4\u56de s \u4e2d\u7b2c n \u4e2a\u5b57\u7b26\u7684\u5f15\u7528 s1 + s2 \u8fde\u63a5 s1 = s2 \u7528 s2 \u7684\u526f\u672c\u4ee3\u66ff s1 \u4e2d\u7684\u5185\u5bb9 s1 == s2 \u4fdd\u5b58\u7684\u5b57\u7b26\u5b8c\u5168\u4e00\u6837\uff0c\u5219\u76f8\u7b49\uff1b\u5927\u5c0f\u5199\u654f\u611f >, >=, <, <= (\u7b2c\u4e00\u5bf9\u76f8\u5f02\u5b57\u7b26) \u5b57\u5178\u5e8f\u6bd4\u8f83\uff0c\u5927\u5c0f\u5199\u654f\u611f","title":"2. \u64cd\u4f5c"},{"location":"3/3.4/#1_1","text":"1 2 3 4 5 6 7 8 9 10 string s ; while ( cin >> s ) { cout << s << endl ; } string line ; while ( getline ( cin , line )) { if ( ! line . empty ()) cout << line << endl ; } \u5faa\u73af\u8bfb\u53d6\uff0c\u76f4\u5230\u8bfb\u53d6\u5230\u6d41\u7ed3\u675f\u7b26\u3002\u5728 Windows \u4e0b\u4e3a Ctrl+Z \u3002","title":"(1). \u8bfb\u5199"},{"location":"3/3.4/#2-stringsize_type","text":"string \u7b49\u6807\u51c6\u5e93\u90fd\u5b9a\u4e49\u4e86\u914d\u5957\u7684\u7c7b\u578b\uff0c\u4f53\u73b0\u4e86\u673a\u5668\u65e0\u5173\u7684\u7279\u6027\u3002\u4f5c\u4e3a s.size() \u7684\u8fd4\u56de\u7c7b\u578b\uff0c string::size_type \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7c7b\u578b\u4e14\u8db3\u591f\u653e\u4e0b\u4efb\u4f55 string \u5bf9\u8c61\u7684\u5927\u5c0f\u3002\u5728 C++11 \u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 auto \u548c decltype \u8fdb\u884c\u7c7b\u578b\u63a8\u65ad\u3002","title":"(2). string::size_type"},{"location":"3/3.4/#3","text":"\u6807\u51c6\u5e93\u652f\u6301\u5b57\u7b26\u5b57\u9762\u91cf\u548c\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u8f6c\u6362\u6210 string \u5bf9\u8c61\u3002 1 2 3 4 string s1 = \"hello\" , s2 = \"world\" ; string s3 = s1 + \",\" + s2 + '\\n' ; string s4 = \"hello\" + \",\" + s2 ; // ERROR","title":"(3). \u76f8\u52a0"},{"location":"3/3.4/#3_1","text":"\u5728 cctype \u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4e00\u7ec4\u5904\u7406\u5b57\u7b26\u7684\u51fd\u6570\uff1a functions in cctype isalnum(c) true: c \u662f\u5b57\u6bcd\u6216\u6570\u5b57 isalpha(c) true: c \u662f\u5b57\u6bcd iscntrl(c) true: c \u662f\u63a7\u5236\u5b57\u7b26 isdigit(c) true: c \u662f\u6570\u5b57 isgraph(c) true: c \u4e0d\u662f\u7a7a\u683c\u4f46\u53ef\u6253\u5370 islower(c) / issuper(c) true: c \u662f\u5c0f/\u5927\u5199\u5b57\u6bcd isprint(c) true: c \u662f\u53ef\u6253\u5370\u5b57\u7b26 (c \u662f\u7a7a\u683c\u6216 c \u5177\u6709\u53ef\u89c6\u5316\u5f62\u5f0f) ispunct(c) true: c \u662f\u6807\u70b9\u7b26\u53f7 isspace(c) true: c \u662f\u7a7a\u683c isxdigit(c) true: c \u662f\u5341\u516d\u8fdb\u5236\u6570\u5b57 tolower(c) / toupper(c) \u8f6c\u6362 \u4f8b: 1 2 3 4 5 6 7 8 string s ( \"Hello World!\" ); decltype ( s . size ()) punct_cnt = 0 ; for ( auto & c : s ) { if ( ispunct ( c )) punct_cnt ++ ; c = toupper ( c ); } cout << s << punct_cnt << endl ; \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5fc5\u987b\u901a\u8fc7\u5f15\u7528\u6539\u53d8\u5927\u5c0f\u5199\u3002","title":"3. \u5904\u7406\u5b57\u7b26"},{"location":"3/3.5/","text":"1. \u5173\u8054\u5bb9\u5668\u6982\u8ff0 C++ \u6807\u51c6\u5e93\u63d0\u4f9b 8 \u4e2a\u5173\u8054\u5bb9\u5668\uff0c\u5b83\u4eec\u6839\u636e\u662f\u5426\u8981\u6c42\u5143\u7d20\u91cd\u590d\u3001\u5173\u952e\u5b57\u662f\u5426\u6709\u5e8f\u5206\u4e3a\u4e09\u4e2a\u7ef4\u5ea6\u3002 type of associative containers map multimap unordered_map unordered_multimap set multiset unordered_set unordered_multiset map \u548c multimap \u5b9a\u4e49\u5728 <map> \u4e2d\uff0c set \u548c multiset \u5b9a\u4e49\u5728 <set> \u4e2d\uff0c\u65e0\u5e8f\u5bb9\u5668\u5b9a\u4e49\u5728 <unordered_map> \u548c <unordered_set> \u4e2d\u3002 2. \u5b9a\u4e49\u548c\u521d\u59cb\u5316 \u540c\u5176\u4ed6\u5bb9\u5668\uff0c\u652f\u6301\u9ed8\u8ba4\u521d\u59cb\u5316\u3001\u540c\u7c7b\u578b\u5bb9\u5668\u62f7\u8d1d\u3001\u503c\u8303\u56f4\u521d\u59cb\u5316\u3001\u503c\u521d\u59cb\u5316\u3002 1 2 3 4 map < string , size_t > word_count ; set < string > exclude = { \"the\" , \"but\" , \"and\" , \"or\" }; map < string , string > authors = { { \"Joyce\" , \"James\" }, { \"Austen\" , \"Jane\" } }; (1). \u6709\u5e8f\u5bb9\u5668\u7684\u5173\u952e\u5b57\u7c7b\u578b \u2003 C++ \u7b97\u6cd5\u548c\u5bb9\u5668\u5185\u901a\u8fc7\u8fd0\u7b97\u7b26 < \u6bd4\u8f83\uff0c\u5f53\u4e14\u4ec5\u5f53 !(a < b) && !(b < a) \u65f6\u8ba4\u4e3a\u4e8c\u8005\u76f8\u7b49\u3002\u56e0\u6b64\uff0c key \u9700\u8981\u91cd\u8f7d < \uff0c\u5e76\u5728\u6b64\u8fd0\u7b97\u7b26\u4e0a\u5b9a\u4e49\u4e00\u4e2a\u4e25\u683c\u5f31\u5e8f\u5173\u7cfb ( strict weak ordering )\uff0c\u5373\u6ee1\u8db3\uff1a\u2460 \u53cd\u81ea\u53cd\uff1b\u2461 \u53cd\u5bf9\u79f0\uff1b\u2462 \u4f20\u9012\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5219\u6bd4\u8f83\u6216\u76f8\u7b49\u7684\u5224\u5b9a (\u4f8b\u5982\u4f7f\u7528 <= \u65f6) \u5c31\u4f1a\u4ea7\u751f\u95ee\u9898\u3002 (2). \u5173\u952e\u5b57\u7c7b\u578b\u7684\u6bd4\u8f83\u51fd\u6570 // ToDo 3. \u5173\u8054\u5bb9\u5668\u64cd\u4f5c (1). pair \u7c7b\u578b pair pair<T1, T2> p; \u5bf9\u4e24\u4e2a\u6210\u5458\u5206\u522b\u8fdb\u884c\u503c\u521d\u59cb\u5316 pair<T1, T2> p(v1, v2); pair<T1, T2> p = {v1, v2}; \u6839\u636e v1 \u548c v2 \u521d\u59cb\u5316 make_pair(v1, v2) \u8fd4\u56de\u4e00\u4e2a\u7528 v1 \u548c v2 \u521d\u59cb\u5316\u7684 pair p.first, p.second public \u6210\u5458 ==, != first \u548c second \u5206\u522b\u76f8\u7b49 >, >=, <, <= \u5b57\u5178\u5e8f\u6bd4\u8f83\uff0c\u5747\u901a\u8fc7 < \u5b9e\u73b0 (2). \u5173\u8054\u5bb9\u5668\u5b9a\u4e49\u7c7b\u578b type of elements key_type \u5bb9\u5668\u7684\u5173\u952e\u5b57\u7c7b\u578b\u3002 mapped_type \u6bcf\u4e2a\u5173\u952e\u5b57\u5173\u8054\u7684\u7c7b\u578b\uff0c\u53ea\u9002\u7528\u4e8e map\u3002 value_type \u5bf9\u4e8e set\uff0c\u4e0e key_type \u76f8\u540c\uff1b\u5bf9\u4e8e map\uff0c\u4e3a pair<const key_type, mapped_type> (3). \u63d2\u5165\u5143\u7d20 insert c.insert(v) c.emplace( args ) v \u662f value_type\uff0c\u8fd4\u56de\u4e00\u4e2a pair\uff0c\u5305\u62ec\u6307\u5b9a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u548c\u63d2\u5165\u662f\u5426\u6210\u529f\u7684\u5e03\u5c14\u503c\u3002 c.insert(b, e) c.insert(i1) \u63d2\u5165\u6307\u5b9a\u8303\u56f4\u6216\u5217\u8868\u7684\u5143\u7d20\uff0c\u8fd4\u56de void c.insert(p, v) c.emplace(p, args ) \u5c06\u8fed\u4ee3\u5668 p \u4f5c\u4e3a\u4e00\u4e2a\u63d0\u793a\uff0c\u6307\u51fa\u4ece\u54ea\u5f00\u59cb\u641c\u7d22\u65b0\u5143\u7d20\u5e94\u8be5\u5b58\u50a8\u7684\u4f4d\u7f6e\u3002 1 2 3 4 5 // four methods of inserting word mp . insert ({ word , 1 }); mp . insert ( make_pair ( word , 1 )); mp . insert ( pair < string , size_t > ( word , 1 )); mp . insert ( map < string , size_t >:: value_type ( word , 1 )); (4). \u5220\u9664\u5143\u7d20 delete c.erase(k) \u5220\u9664\u6bcf\u4e2a\u503c\u4e3a k \u7684\u503c\uff0c\u8fd4\u56de\u6570\u91cf\uff0c\u7c7b\u578b\u4e3a size_type\u3002 c.erase(p) \u5220\u9664\u8fed\u4ee3\u5668 p \u6307\u5b9a\u7684\u5143\u7d20\uff0c\u8fd4\u56de p \u4e4b\u540e\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 c.erase(b, e) \u5220\u9664\u8303\u56f4\u5185\u5143\u7d20\uff0c\u8fd4\u56de e (5). map \u7684\u4e0b\u6807\u64cd\u4f5c map \u548c unordered_map (\u975e const ) \u63d0\u4f9b\u4e86\u4e0b\u6807\u64cd\u4f5c\u548c at() \u51fd\u6570\u3002 multi \u5bb9\u5668\u7531\u4e8e\u4e00\u4e2a key \u53ef\u80fd\u6709\u591a\u4e2a value \uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u3002 index of map c[k] \u8fd4\u56de\u5173\u952e\u5b57\u4e3a k \u7684\u5143\u7d20\uff1b\u5982\u679c k \u4e0d\u5728 c \u4e2d\uff0c\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a k \u7684\u5143\u7d20\uff0c\u5e76\u8fdb\u884c\u503c\u521d\u59cb\u5316\u3002 c.at(k) \u82e5 k \u4e0d\u5728 c \u4e2d\uff0c\u629b\u51fa out_of_range \u5f02\u5e38\u3002 (6). \u8bbf\u95ee\u5143\u7d20 access c.find(k) \u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\u4e3a k \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u5c3e\u540e\u8fed\u4ee3\u5668\u3002 c.count(k) \u8fd4\u56de\u5173\u952e\u5b57\u7b49\u4e8e k \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u5bb9\u5668\u53ef\u80fd\u4e0e find() \u6ca1\u533a\u522b\u3002 c.lower_bound(k) \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e k \u7684\u5143\u7d20\uff0c\u5426\u5219\u8fd4\u56de\u5c3e\u540e\u8fed\u4ee3\u5668\u3002 c.upper_bound(k) \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5927\u4e8e k \u7684\u5143\u7d20\uff0c\u5426\u5219\u8fd4\u56de\u5c3e\u540e\u8fed\u4ee3\u5668\u3002 c.equal_range(k) \u8fd4\u56de\u5305\u62ec\u4e24\u4e2a\u8fed\u4ee3\u5668\u7684 pair\uff0c\u8868\u793a k \u7684\u8303\u56f4\uff0c\u82e5\u4e0d\u5b58\u5728\u4e24\u4e2a\u6210\u5458\u5747\u7b49\u4e8e c.end() lower_bound() \u548c upper_bound() \u4e0d\u652f\u6301\u65e0\u5e8f\u5bb9\u5668\u3002 (7). \u8fed\u4ee3\u5668 \u5728\u89e3\u5f15\u7528\u5173\u8054\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u65f6\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u4e3a\u5bb9\u5668\u7684 value_type \u7684\u5f15\u7528\u3002 \u5bf9 map \uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a pair \uff0c first \u662f\u4e00\u4e2a const \u7684 key \uff1b second \u4e3a value \u4e14\u53ef\u4ee5\u4fee\u6539\uff1b \u5bf9 set \uff0c\u867d\u7136\u5b83\u540c\u65f6\u5b9a\u4e49\u4e86 const_iterator \u548c iterator \uff0c\u4f46\u4e24\u79cd\u7c7b\u578b\u90fd\u662f\u53ea\u8bfb\u7684\u3002 \u7531\u4e8e const \u8fd9\u4e00\u7279\u6027\uff0c\u5173\u8054\u5bb9\u5668\u53ea\u53ef\u7528\u4e8e\u53ea\u8bfb\u7684\u6cdb\u578b\u7b97\u6cd5\u3002 4. \u65e0\u5e8f\u5bb9\u5668 \u2003\u65e0\u5e8f\u5bb9\u5668\u57fa\u4e8e\u54c8\u5e0c\u8868\u800c\u4e0d\u662f\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7ec4\u7ec7\u5143\u7d20\u3002\u65e0\u5e8f\u5bb9\u5668\u5728\u5b58\u50a8\u4e0a\u7ec4\u7ec7\u4e3a\u4e00\u7ec4\u6876\uff0c\u6bcf\u4e2a\u6876\u4fdd\u5b58\u96f6\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\uff0c\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u90fd\u76f8\u540c\uff1b\u4e3a\u4e86\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\uff0c\u5bb9\u5668\u4f1a\u9996\u5148\u8ba1\u7b97\u54c8\u5e0c\u503c\u4ee5\u5b9a\u4f4d\u6876\uff0c\u5982\u679c\u5141\u8bb8\u91cd\u590d\u5173\u952e\u5b57\uff0c\u6240\u6709\u5143\u7d20\u90fd\u5728\u4e00\u4e2a\u6876\u4e2d\u3002 manage the buckets bucket interface c.bucket_count() \u6b63\u5728\u4f7f\u7528\u7684\u6876\u7684\u6570\u76ee c.max_bucket_count() \u6700\u591a\u80fd\u5bb9\u7eb3\u7684\u6876\u7684\u6570\u91cf c.bucket_size() \u7b2c n \u4e2a\u6876\u6709\u591a\u5c11\u5143\u7d20 c.bucket(k) \u5173\u952e\u5b57\u4e3a k \u7684\u5143\u7d20\u5728\u54ea\u4e2a\u6876\u4e2d bucket iteration c.begin(n), c.end(n) \u6876 n \u7684\u9996\u5143\u7d20\u8fed\u4ee3\u5668\u548c\u5c3e\u540e\u8fed\u4ee3\u5668 c.cbegin(n), c.cend(n) const hashing strategy c.load_factor() \u5b9e\u9645\u6bcf\u4e2a\u6876\u7684\u5e73\u5747\u5143\u7d20\u6570\u91cf\uff0c\u8fd4\u56de float c.max_loat_factor() c \u8bd5\u56fe\u7ef4\u62a4\u7684\u6bcf\u4e2a\u6876\u7684\u5e73\u5747\u5143\u7d20\u6570\u91cf\uff0c\u8fd4\u56de float c.rehash(n) \u91cd\u7ec4\u5b58\u50a8\uff0c\u4f7f\u5f97 bucket_count >= n && bucket_count > size / max_load_factor c.reserve(n) \u91cd\u7ec4\u5b58\u50a8\uff0c\u4f7f\u5f97 c \u53ef\u4ee5\u4fdd\u5b58 n \u4e2a\u5143\u7d20\u4e14\u4e0d\u5fc5 rehash \u65e0\u5e8f\u5bb9\u5668\u9700\u8981\u5b58\u50a8\u7c7b\u578b\u91cd\u8f7d\u54c8\u5e0c\u51fd\u6570\u548c == \u3002","title":"6.associative container"},{"location":"3/3.5/#1","text":"C++ \u6807\u51c6\u5e93\u63d0\u4f9b 8 \u4e2a\u5173\u8054\u5bb9\u5668\uff0c\u5b83\u4eec\u6839\u636e\u662f\u5426\u8981\u6c42\u5143\u7d20\u91cd\u590d\u3001\u5173\u952e\u5b57\u662f\u5426\u6709\u5e8f\u5206\u4e3a\u4e09\u4e2a\u7ef4\u5ea6\u3002 type of associative containers map multimap unordered_map unordered_multimap set multiset unordered_set unordered_multiset map \u548c multimap \u5b9a\u4e49\u5728 <map> \u4e2d\uff0c set \u548c multiset \u5b9a\u4e49\u5728 <set> \u4e2d\uff0c\u65e0\u5e8f\u5bb9\u5668\u5b9a\u4e49\u5728 <unordered_map> \u548c <unordered_set> \u4e2d\u3002","title":"1. \u5173\u8054\u5bb9\u5668\u6982\u8ff0"},{"location":"3/3.5/#2","text":"\u540c\u5176\u4ed6\u5bb9\u5668\uff0c\u652f\u6301\u9ed8\u8ba4\u521d\u59cb\u5316\u3001\u540c\u7c7b\u578b\u5bb9\u5668\u62f7\u8d1d\u3001\u503c\u8303\u56f4\u521d\u59cb\u5316\u3001\u503c\u521d\u59cb\u5316\u3002 1 2 3 4 map < string , size_t > word_count ; set < string > exclude = { \"the\" , \"but\" , \"and\" , \"or\" }; map < string , string > authors = { { \"Joyce\" , \"James\" }, { \"Austen\" , \"Jane\" } };","title":"2. \u5b9a\u4e49\u548c\u521d\u59cb\u5316"},{"location":"3/3.5/#1_1","text":"C++ \u7b97\u6cd5\u548c\u5bb9\u5668\u5185\u901a\u8fc7\u8fd0\u7b97\u7b26 < \u6bd4\u8f83\uff0c\u5f53\u4e14\u4ec5\u5f53 !(a < b) && !(b < a) \u65f6\u8ba4\u4e3a\u4e8c\u8005\u76f8\u7b49\u3002\u56e0\u6b64\uff0c key \u9700\u8981\u91cd\u8f7d < \uff0c\u5e76\u5728\u6b64\u8fd0\u7b97\u7b26\u4e0a\u5b9a\u4e49\u4e00\u4e2a\u4e25\u683c\u5f31\u5e8f\u5173\u7cfb ( strict weak ordering )\uff0c\u5373\u6ee1\u8db3\uff1a\u2460 \u53cd\u81ea\u53cd\uff1b\u2461 \u53cd\u5bf9\u79f0\uff1b\u2462 \u4f20\u9012\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5219\u6bd4\u8f83\u6216\u76f8\u7b49\u7684\u5224\u5b9a (\u4f8b\u5982\u4f7f\u7528 <= \u65f6) \u5c31\u4f1a\u4ea7\u751f\u95ee\u9898\u3002","title":"(1). \u6709\u5e8f\u5bb9\u5668\u7684\u5173\u952e\u5b57\u7c7b\u578b"},{"location":"3/3.5/#2_1","text":"// ToDo","title":"(2). \u5173\u952e\u5b57\u7c7b\u578b\u7684\u6bd4\u8f83\u51fd\u6570"},{"location":"3/3.5/#3","text":"","title":"3. \u5173\u8054\u5bb9\u5668\u64cd\u4f5c"},{"location":"3/3.5/#1-pair","text":"pair pair<T1, T2> p; \u5bf9\u4e24\u4e2a\u6210\u5458\u5206\u522b\u8fdb\u884c\u503c\u521d\u59cb\u5316 pair<T1, T2> p(v1, v2); pair<T1, T2> p = {v1, v2}; \u6839\u636e v1 \u548c v2 \u521d\u59cb\u5316 make_pair(v1, v2) \u8fd4\u56de\u4e00\u4e2a\u7528 v1 \u548c v2 \u521d\u59cb\u5316\u7684 pair p.first, p.second public \u6210\u5458 ==, != first \u548c second \u5206\u522b\u76f8\u7b49 >, >=, <, <= \u5b57\u5178\u5e8f\u6bd4\u8f83\uff0c\u5747\u901a\u8fc7 < \u5b9e\u73b0","title":"(1). pair \u7c7b\u578b"},{"location":"3/3.5/#2_2","text":"type of elements key_type \u5bb9\u5668\u7684\u5173\u952e\u5b57\u7c7b\u578b\u3002 mapped_type \u6bcf\u4e2a\u5173\u952e\u5b57\u5173\u8054\u7684\u7c7b\u578b\uff0c\u53ea\u9002\u7528\u4e8e map\u3002 value_type \u5bf9\u4e8e set\uff0c\u4e0e key_type \u76f8\u540c\uff1b\u5bf9\u4e8e map\uff0c\u4e3a pair<const key_type, mapped_type>","title":"(2). \u5173\u8054\u5bb9\u5668\u5b9a\u4e49\u7c7b\u578b"},{"location":"3/3.5/#3_1","text":"insert c.insert(v) c.emplace( args ) v \u662f value_type\uff0c\u8fd4\u56de\u4e00\u4e2a pair\uff0c\u5305\u62ec\u6307\u5b9a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u548c\u63d2\u5165\u662f\u5426\u6210\u529f\u7684\u5e03\u5c14\u503c\u3002 c.insert(b, e) c.insert(i1) \u63d2\u5165\u6307\u5b9a\u8303\u56f4\u6216\u5217\u8868\u7684\u5143\u7d20\uff0c\u8fd4\u56de void c.insert(p, v) c.emplace(p, args ) \u5c06\u8fed\u4ee3\u5668 p \u4f5c\u4e3a\u4e00\u4e2a\u63d0\u793a\uff0c\u6307\u51fa\u4ece\u54ea\u5f00\u59cb\u641c\u7d22\u65b0\u5143\u7d20\u5e94\u8be5\u5b58\u50a8\u7684\u4f4d\u7f6e\u3002 1 2 3 4 5 // four methods of inserting word mp . insert ({ word , 1 }); mp . insert ( make_pair ( word , 1 )); mp . insert ( pair < string , size_t > ( word , 1 )); mp . insert ( map < string , size_t >:: value_type ( word , 1 ));","title":"(3). \u63d2\u5165\u5143\u7d20"},{"location":"3/3.5/#4","text":"delete c.erase(k) \u5220\u9664\u6bcf\u4e2a\u503c\u4e3a k \u7684\u503c\uff0c\u8fd4\u56de\u6570\u91cf\uff0c\u7c7b\u578b\u4e3a size_type\u3002 c.erase(p) \u5220\u9664\u8fed\u4ee3\u5668 p \u6307\u5b9a\u7684\u5143\u7d20\uff0c\u8fd4\u56de p \u4e4b\u540e\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 c.erase(b, e) \u5220\u9664\u8303\u56f4\u5185\u5143\u7d20\uff0c\u8fd4\u56de e","title":"(4). \u5220\u9664\u5143\u7d20"},{"location":"3/3.5/#5-map","text":"map \u548c unordered_map (\u975e const ) \u63d0\u4f9b\u4e86\u4e0b\u6807\u64cd\u4f5c\u548c at() \u51fd\u6570\u3002 multi \u5bb9\u5668\u7531\u4e8e\u4e00\u4e2a key \u53ef\u80fd\u6709\u591a\u4e2a value \uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u3002 index of map c[k] \u8fd4\u56de\u5173\u952e\u5b57\u4e3a k \u7684\u5143\u7d20\uff1b\u5982\u679c k \u4e0d\u5728 c \u4e2d\uff0c\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a k \u7684\u5143\u7d20\uff0c\u5e76\u8fdb\u884c\u503c\u521d\u59cb\u5316\u3002 c.at(k) \u82e5 k \u4e0d\u5728 c \u4e2d\uff0c\u629b\u51fa out_of_range \u5f02\u5e38\u3002","title":"(5). map \u7684\u4e0b\u6807\u64cd\u4f5c"},{"location":"3/3.5/#6","text":"access c.find(k) \u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5173\u952e\u5b57\u4e3a k \u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56de\u5c3e\u540e\u8fed\u4ee3\u5668\u3002 c.count(k) \u8fd4\u56de\u5173\u952e\u5b57\u7b49\u4e8e k \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u4e0d\u5141\u8bb8\u91cd\u590d\u7684\u5bb9\u5668\u53ef\u80fd\u4e0e find() \u6ca1\u533a\u522b\u3002 c.lower_bound(k) \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e k \u7684\u5143\u7d20\uff0c\u5426\u5219\u8fd4\u56de\u5c3e\u540e\u8fed\u4ee3\u5668\u3002 c.upper_bound(k) \u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5927\u4e8e k \u7684\u5143\u7d20\uff0c\u5426\u5219\u8fd4\u56de\u5c3e\u540e\u8fed\u4ee3\u5668\u3002 c.equal_range(k) \u8fd4\u56de\u5305\u62ec\u4e24\u4e2a\u8fed\u4ee3\u5668\u7684 pair\uff0c\u8868\u793a k \u7684\u8303\u56f4\uff0c\u82e5\u4e0d\u5b58\u5728\u4e24\u4e2a\u6210\u5458\u5747\u7b49\u4e8e c.end() lower_bound() \u548c upper_bound() \u4e0d\u652f\u6301\u65e0\u5e8f\u5bb9\u5668\u3002","title":"(6). \u8bbf\u95ee\u5143\u7d20"},{"location":"3/3.5/#7","text":"\u5728\u89e3\u5f15\u7528\u5173\u8054\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u65f6\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7c7b\u578b\u4e3a\u5bb9\u5668\u7684 value_type \u7684\u5f15\u7528\u3002 \u5bf9 map \uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a pair \uff0c first \u662f\u4e00\u4e2a const \u7684 key \uff1b second \u4e3a value \u4e14\u53ef\u4ee5\u4fee\u6539\uff1b \u5bf9 set \uff0c\u867d\u7136\u5b83\u540c\u65f6\u5b9a\u4e49\u4e86 const_iterator \u548c iterator \uff0c\u4f46\u4e24\u79cd\u7c7b\u578b\u90fd\u662f\u53ea\u8bfb\u7684\u3002 \u7531\u4e8e const \u8fd9\u4e00\u7279\u6027\uff0c\u5173\u8054\u5bb9\u5668\u53ea\u53ef\u7528\u4e8e\u53ea\u8bfb\u7684\u6cdb\u578b\u7b97\u6cd5\u3002","title":"(7). \u8fed\u4ee3\u5668"},{"location":"3/3.5/#4_1","text":"\u65e0\u5e8f\u5bb9\u5668\u57fa\u4e8e\u54c8\u5e0c\u8868\u800c\u4e0d\u662f\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7ec4\u7ec7\u5143\u7d20\u3002\u65e0\u5e8f\u5bb9\u5668\u5728\u5b58\u50a8\u4e0a\u7ec4\u7ec7\u4e3a\u4e00\u7ec4\u6876\uff0c\u6bcf\u4e2a\u6876\u4fdd\u5b58\u96f6\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\uff0c\u5b83\u4eec\u7684\u54c8\u5e0c\u503c\u90fd\u76f8\u540c\uff1b\u4e3a\u4e86\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\uff0c\u5bb9\u5668\u4f1a\u9996\u5148\u8ba1\u7b97\u54c8\u5e0c\u503c\u4ee5\u5b9a\u4f4d\u6876\uff0c\u5982\u679c\u5141\u8bb8\u91cd\u590d\u5173\u952e\u5b57\uff0c\u6240\u6709\u5143\u7d20\u90fd\u5728\u4e00\u4e2a\u6876\u4e2d\u3002 manage the buckets bucket interface c.bucket_count() \u6b63\u5728\u4f7f\u7528\u7684\u6876\u7684\u6570\u76ee c.max_bucket_count() \u6700\u591a\u80fd\u5bb9\u7eb3\u7684\u6876\u7684\u6570\u91cf c.bucket_size() \u7b2c n \u4e2a\u6876\u6709\u591a\u5c11\u5143\u7d20 c.bucket(k) \u5173\u952e\u5b57\u4e3a k \u7684\u5143\u7d20\u5728\u54ea\u4e2a\u6876\u4e2d bucket iteration c.begin(n), c.end(n) \u6876 n \u7684\u9996\u5143\u7d20\u8fed\u4ee3\u5668\u548c\u5c3e\u540e\u8fed\u4ee3\u5668 c.cbegin(n), c.cend(n) const hashing strategy c.load_factor() \u5b9e\u9645\u6bcf\u4e2a\u6876\u7684\u5e73\u5747\u5143\u7d20\u6570\u91cf\uff0c\u8fd4\u56de float c.max_loat_factor() c \u8bd5\u56fe\u7ef4\u62a4\u7684\u6bcf\u4e2a\u6876\u7684\u5e73\u5747\u5143\u7d20\u6570\u91cf\uff0c\u8fd4\u56de float c.rehash(n) \u91cd\u7ec4\u5b58\u50a8\uff0c\u4f7f\u5f97 bucket_count >= n && bucket_count > size / max_load_factor c.reserve(n) \u91cd\u7ec4\u5b58\u50a8\uff0c\u4f7f\u5f97 c \u53ef\u4ee5\u4fdd\u5b58 n \u4e2a\u5143\u7d20\u4e14\u4e0d\u5fc5 rehash \u65e0\u5e8f\u5bb9\u5668\u9700\u8981\u5b58\u50a8\u7c7b\u578b\u91cd\u8f7d\u54c8\u5e0c\u51fd\u6570\u548c == \u3002","title":"4. \u65e0\u5e8f\u5bb9\u5668"},{"location":"4/4.1/","text":"1. \u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa (1). printf() \u683c\u5f0f\u5316 %a, %A \u6d6e\u70b9\u6570\u3001\u5341\u516d\u8fdb\u5236\u6570\u548c p \u8bb0\u6570\u6cd5 %c \u5355\u4e2a\u5b57\u7b26 %d, %i \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 %e, %E \u6d6e\u70b9\u6570\uff0ce \u8bb0\u6570\u6cd5 %f \u6d6e\u70b9\u6570\uff0c\u5341\u8fdb\u5236\u8bb0\u6570\u6cd5 %g, %G \u6839\u636e\u503c\u7684\u4e0d\u540c\uff0c\u81ea\u52a8\u9009\u62e9 %e \u6216 %f\u3002\u5c0f\u6570\u90e8\u5206\u5c0f\u4e8e 10 -4 \u65f6\u9009\u62e9 %e %o \u65e0\u7b26\u53f7\u516b\u8fdb\u5236 %x, %X \u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236 %u \u65e0\u7b26\u53f7\u5341\u8fdb\u5236 %p \u6307\u9488 %s \u5b57\u7b26\u4e32 %% \u767e\u5206\u53f7 \u4fee\u9970\u7b26 - \u6253\u5370\u65f6\u5de6\u5bf9\u9f50 (\u9ed8\u8ba4\u53f3\u5bf9\u9f50) %-10d + \u663e\u793a\u6b63\u8d1f\u53f7 - \u7a7a\u683c \u663e\u793a\u7a7a\u683c\u548c\u8d1f\u53f7 - # \u7ed3\u679c\u8f6c\u6362\u5f62\u5f0f\u3002\u5982\u516b\u8fdb\u5236\u586b 0\u3001\u5341\u516d\u8fdb\u5236\u586b 0x\u3001\u5c0f\u6570\u4fdd\u8bc1\u6709\u5c0f\u6570\u70b9 %#X \u6570\u5b57 \u6307\u5b9a\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\uff0c\u82e5\u5b9e\u9645\u8d85\u8fc7\u6b64\u503c\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528\u66f4\u5bbd\u7684\u5b57\u6bb5 - .\u6570\u5b57 %e, %E, %f: \u5c0f\u6570\u4f4d\u6570 %g, %G: \u6709\u6548\u6570\u5b57\u4f4d\u6570 %s: \u5f85\u6253\u5370\u5b57\u7b26\u6700\u5927\u6570\u91cf \u6574\u578b\uff1a\u5f85\u6253\u5370\u6570\u5b57\u6700\u5c0f\u4f4d\u6570\uff0c\u8fbe\u4e0d\u5230\u6b64\u503c\u7684\u90e8\u5206\u586b 0 %5.2f h short int, unsigned short int %hu, %hd hh signed char, unsigned char %hhx, %hhd l long int, unsigned long int %ld, %lu ll long long int, unsigned long long int %lld L long double %Ld LL \u6307\u9488\u5dee\u503c ptrdiff_t %td z size_t %zd (2). scanf() \u683c\u5f0f\u5316 %a, %A, %e, %E, %f, %F, %g, %G \u5c0f\u6570 \u5176\u4f59\u540c printf() \u4fee\u9970\u7b26 * \u6291\u5236\u8f93\u5165 %*d \u6570\u5b57 \u6307\u5b9a\u6700\u5927\u5b57\u6bb5\u5bbd\u5ea6\uff0c\u8f93\u5165\u5728\u9047\u5230\u7a7a\u683c\u6216\u8fbe\u5230\u6700\u5927\u5bbd\u5ea6\u540e\u9694\u65ad\u3002 - hh signed char, unsigned char - ll long long, unsigned long long - h, l, L %hd, %hi: short int %ho, %hx, %hu: unsigned short int %ld, %li: long %lo, %lx, %lu: unsigned long %le, %lf, %lg: double, long double \u5219\u628a l \u66ff\u6362\u4e3a L t ptrdiff_t - z size_t - (3). * \u4fee\u9970\u7b26 printf() \u548c scanf() \u7684 * \u4fee\u9970\u7b26\u7684\u7528\u6cd5\u4e0d\u540c\u3002 printf() : \u901a\u8fc7\u7a0b\u5e8f\u6307\u5b9a\u5b57\u6bb5\u5bbd\u5ea6\uff0c\u9700\u8981\u989d\u5916\u53c2\u6570\u3002 1 printf ( \"Weight = %*.*f \\n \" , width , precision , weight ); scanf() : \u8df3\u8fc7\u76f8\u5e94\u7684\u8f93\u5165\u9879\u3002 1 2 3 4 int n ; printf ( \"Please enter three integers: \\n \" ); scanf ( \"%*d %*d %d\" , & n ); printf ( \"The last integer was %d \\n \" , n ); 2. \u6587\u4ef6 IO (1). fopen() \u51fd\u6570\u539f\u578b\u4e3a FILE *fopen(const char *filename, const char *mode) mode of fopen() \"r\" \u8bfb\u6a21\u5f0f \"w\" \u5199\u6a21\u5f0f\uff0c\u628a\u73b0\u6709\u6587\u4ef6\u957f\u5ea6\u622a\u4e3a 0\uff0c\u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"a\" \u5199\u6a21\u5f0f\uff0c\u5728\u73b0\u6709\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u5185\u5bb9\uff0c\u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"r+\" \u8bfb\u5199\u6a21\u5f0f \"w+\" \u8bfb\u5199\u6a21\u5f0f\uff0c\u82e5\u6587\u4ef6\u5b58\u5728\u5219\u622a\u4e3a 0\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"a+\" \u8bfb\u5199\u6a21\u5f0f\uff0c\u5728\u672b\u5c3e\u6dfb\u52a0\u5185\u5bb9\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"rb\", \"wb\", \"ab\", \"ab+\" \"a+b\", \"wb+\", \"w+b\" \"ab+\", \"a+b\" \u4e8c\u8fdb\u5236\u6a21\u5f0f \u2003 fopen() \u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488\uff0c\u5b83\u5e76\u4e0d\u6307\u5411\u5b9e\u9645\u7684\u6587\u4ef6\uff0c\u800c\u6307\u5411\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u64cd\u4f5c\u6587\u4ef6\u7684 IO \u51fd\u6570\u6240\u7528\u7684\u7f13\u51b2\u533a\u4fe1\u606f\u3002 \u2003\u5728\u6587\u4ef6\u64cd\u4f5c\u7ed3\u675f\u540e\uff0c\u901a\u8fc7 int fclose(FILE *fp) \u5173\u95ed\u6587\u4ef6\u3002\u5728\u8f83\u6b63\u5f0f\u7684\u7a0b\u5e8f\u4e2d\uff0c\u9700\u8981\u663e\u5f0f\u68c0\u67e5\u5176\u662f\u5426\u8c03\u7528\u5931\u8d25\uff0c\u78c1\u76d8\u5df2\u6ee1\u3001\u79fb\u52a8\u786c\u76d8\u88ab\u79fb\u9664\u548c IO \u9519\u8bef\u5747\u4f1a\u5bfc\u81f4\u8c03\u7528\u5931\u8d25\u3002 (2). getc()\u3001putc() \u7c7b\u4f3c\u4e0e getchar() \u548c putchar() \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u9700\u8981\u6307\u660e\u6587\u4ef6\u3002 int getc(FILE *file) , int putc(int ch, FILE *file) getc() \u5728\u8bfb\u53d6\u65f6\u5982\u679c\u53d1\u73b0\u662f\u6587\u4ef6\u7ed3\u5c3e\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c EOF \u3002 1 2 3 while (( ch = getc ( fp )) != EOF ) { // determine the file is not empty putchar ( ch ); } (3). fprintf()\u3001fscanf()\u3001fgets()\u3001fputs() int fscanf(FILE *stream, const char *format, ...) int fprintf(FILE *stream, const char *format, ...) \u4e0e scanf() \u548c printf() \u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6587\u4ef6\u6307\u9488\u3002 char *fgets(char *buf, int count, FILE *file) \u6307\u5b9a\u5b58\u50a8\u4f4d\u7f6e\u548c\u5b57\u7b26\u4e32\u5927\u5c0f\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6: \u6216\u8bfb\u53d6\u5230\u7b2c\u4e00\u4e2a\u6362\u884c\u7b26\u540e\u9762 (\u6362\u884c\u7b26\u4e5f\u88ab\u8bfb\u53d6)\uff0c\u6216\u8bfb\u5230\u6587\u4ef6\u7ed3\u5c3e\uff0c\u6216\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u5e76\u5b58\u50a8\u5728 buf \u4e2d\u3002\u5728\u9047\u5230\u6587\u4ef6\u7ed3\u5c3e\u65f6\u8fd4\u56de NULL\u3002 int fputs(char *buf, FILE *file) \u628a\u5b57\u7b26\u6570\u7ec4\u4e2d\u7684\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u4e2d\u3002 (4). fseek()\u3001ftell()\u3001rewind() int fseek(FILE *file, long offset, int origin) \u628a\u6587\u4ef6\u89c6\u4e3a\u5b57\u8282\u5e8f\u5217\uff0c\u79fb\u52a8\u6587\u4ef6\u5185\u7684\u6307\u9488\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u79fb\u52a8\u7684\u504f\u79fb\u91cf (\u53ef\u4ee5\u4e3a\u6b63\u3001\u8d1f\u30010)\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\u8d77\u59cb\u70b9\uff0c\u6839\u636e ANSI \u6807\u51c6\uff0c\u5728 <stdio.h> \u5b9a\u4e49\u4e86\u51e0\u4e2a\u660e\u793a\u5e38\u91cf\uff1a mode of fseek() SEEK_SET \u6587\u4ef6\u5f00\u59cb SEEK_CUR \u5f53\u524d\u4f4d\u7f6e SEEK_END \u6587\u4ef6\u7ed3\u5c3e \u65e7\u7684\u5b9e\u73b0\u53ef\u80fd\u7f3a\u5c11\u8fd9\u4e9b\u5b9a\u4e49\uff0c\u6b64\u65f6\u7528 0L\u30011L\u30012L \u8868\u793a\u3002\u8c03\u7528\u6210\u529f\u51fd\u6570\u8fd4\u56de 0\uff0c\u51fa\u9519\u5219\u8fd4\u56de -1\u3002 ftell(FILE *file) \u8fd4\u56de\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u5f53\u4ee5\u8ffd\u52a0\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u540e\uff0c\u672a\u8fdb\u884c\u4efb\u4f55 IO \u64cd\u4f5c\u524d\uff0c\u8fd9\u4e2a\u65f6\u523b\u7684\u5185\u90e8\u6307\u9488\u4ecd\u6307\u5411\u6587\u4ef6\u5934\u90e8\u3002 rewind(FILE *file) \u5c06\u6587\u4ef6\u5185\u90e8\u7684\u6307\u9488\u91cd\u65b0\u6307\u5411\u6587\u4ef6\u7684\u5f00\u5934\u3002 (5). fflush() int fflush(FILE *fp) C \u6807\u51c6\u5e93\u4e2d\u6240\u6709 IO \u90fd\u662f\u7f13\u51b2 IO \u3002\u6b64\u51fd\u6570\u628a\u8f93\u51fa\u7f13\u51b2\u533a\u6240\u6709\u672a\u5199\u5165\u5230\u6307\u5b9a\u6587\u4ef6\u7684\u6570\u636e\u5199\u5165\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u5237\u65b0\u7f13\u51b2\u533a\u3002\u5bf9\u8f93\u5165\u7f13\u51b2\u533a\u4f7f\u7528\u6b64\u51fd\u6570\u65f6\u672a\u5b9a\u4e49\u7684\uff1b\u4efb\u610f\u8bfb\u5199\u6a21\u5f0f\u4e0b\uff0c\u53ea\u8981\u6700\u8fd1\u4e00\u6b21\u64cd\u4f5c\u4e0d\u662f\u8f93\u5165\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u66f4\u65b0\u6d41\u3002 (6). feof()\u3001ferror() \u8bfb\u53d6\u5230\u6587\u4ef6\u7ed3\u5c3e\u6216\u8bfb\u53d6\u9519\u8bef\u65f6\uff0c\u6807\u51c6\u8f93\u5165\u51fd\u6570\u90fd\u4f1a\u8fd4\u56de EOF \uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7528\u4e8e\u533a\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002 int feof(FILE *file) , \u2003 int ferror(FILE *file) \u5728\u4e0a\u4e00\u6b21\u8f93\u5165\u64cd\u4f5c\u68c0\u6d4b\u5230\u6587\u4ef6\u7ed3\u5c3e\u65f6\uff0c feof() \u8fd4\u56de\u4e00\u4e2a\u975e 0 \u503c\uff0c\u5426\u5219\u8fd4\u56de 0 \uff1b\u5f53\u8bfb\u6216\u5199\u9047\u5230\u9519\u8bef\uff0c ferror() \u8fd4\u56de\u975e 0 \uff0c\u5426\u5219\u8fd4\u56de 0 \u3002","title":"1.cstdio"},{"location":"4/4.1/#1","text":"","title":"1. \u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa"},{"location":"4/4.1/#1-printf","text":"\u683c\u5f0f\u5316 %a, %A \u6d6e\u70b9\u6570\u3001\u5341\u516d\u8fdb\u5236\u6570\u548c p \u8bb0\u6570\u6cd5 %c \u5355\u4e2a\u5b57\u7b26 %d, %i \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 %e, %E \u6d6e\u70b9\u6570\uff0ce \u8bb0\u6570\u6cd5 %f \u6d6e\u70b9\u6570\uff0c\u5341\u8fdb\u5236\u8bb0\u6570\u6cd5 %g, %G \u6839\u636e\u503c\u7684\u4e0d\u540c\uff0c\u81ea\u52a8\u9009\u62e9 %e \u6216 %f\u3002\u5c0f\u6570\u90e8\u5206\u5c0f\u4e8e 10 -4 \u65f6\u9009\u62e9 %e %o \u65e0\u7b26\u53f7\u516b\u8fdb\u5236 %x, %X \u65e0\u7b26\u53f7\u5341\u516d\u8fdb\u5236 %u \u65e0\u7b26\u53f7\u5341\u8fdb\u5236 %p \u6307\u9488 %s \u5b57\u7b26\u4e32 %% \u767e\u5206\u53f7 \u4fee\u9970\u7b26 - \u6253\u5370\u65f6\u5de6\u5bf9\u9f50 (\u9ed8\u8ba4\u53f3\u5bf9\u9f50) %-10d + \u663e\u793a\u6b63\u8d1f\u53f7 - \u7a7a\u683c \u663e\u793a\u7a7a\u683c\u548c\u8d1f\u53f7 - # \u7ed3\u679c\u8f6c\u6362\u5f62\u5f0f\u3002\u5982\u516b\u8fdb\u5236\u586b 0\u3001\u5341\u516d\u8fdb\u5236\u586b 0x\u3001\u5c0f\u6570\u4fdd\u8bc1\u6709\u5c0f\u6570\u70b9 %#X \u6570\u5b57 \u6307\u5b9a\u6700\u5c0f\u5b57\u6bb5\u5bbd\u5ea6\uff0c\u82e5\u5b9e\u9645\u8d85\u8fc7\u6b64\u503c\uff0c\u7cfb\u7edf\u4f1a\u4f7f\u7528\u66f4\u5bbd\u7684\u5b57\u6bb5 - .\u6570\u5b57 %e, %E, %f: \u5c0f\u6570\u4f4d\u6570 %g, %G: \u6709\u6548\u6570\u5b57\u4f4d\u6570 %s: \u5f85\u6253\u5370\u5b57\u7b26\u6700\u5927\u6570\u91cf \u6574\u578b\uff1a\u5f85\u6253\u5370\u6570\u5b57\u6700\u5c0f\u4f4d\u6570\uff0c\u8fbe\u4e0d\u5230\u6b64\u503c\u7684\u90e8\u5206\u586b 0 %5.2f h short int, unsigned short int %hu, %hd hh signed char, unsigned char %hhx, %hhd l long int, unsigned long int %ld, %lu ll long long int, unsigned long long int %lld L long double %Ld LL \u6307\u9488\u5dee\u503c ptrdiff_t %td z size_t %zd","title":"(1). printf()"},{"location":"4/4.1/#2-scanf","text":"\u683c\u5f0f\u5316 %a, %A, %e, %E, %f, %F, %g, %G \u5c0f\u6570 \u5176\u4f59\u540c printf() \u4fee\u9970\u7b26 * \u6291\u5236\u8f93\u5165 %*d \u6570\u5b57 \u6307\u5b9a\u6700\u5927\u5b57\u6bb5\u5bbd\u5ea6\uff0c\u8f93\u5165\u5728\u9047\u5230\u7a7a\u683c\u6216\u8fbe\u5230\u6700\u5927\u5bbd\u5ea6\u540e\u9694\u65ad\u3002 - hh signed char, unsigned char - ll long long, unsigned long long - h, l, L %hd, %hi: short int %ho, %hx, %hu: unsigned short int %ld, %li: long %lo, %lx, %lu: unsigned long %le, %lf, %lg: double, long double \u5219\u628a l \u66ff\u6362\u4e3a L t ptrdiff_t - z size_t -","title":"(2). scanf()"},{"location":"4/4.1/#3","text":"printf() \u548c scanf() \u7684 * \u4fee\u9970\u7b26\u7684\u7528\u6cd5\u4e0d\u540c\u3002 printf() : \u901a\u8fc7\u7a0b\u5e8f\u6307\u5b9a\u5b57\u6bb5\u5bbd\u5ea6\uff0c\u9700\u8981\u989d\u5916\u53c2\u6570\u3002 1 printf ( \"Weight = %*.*f \\n \" , width , precision , weight ); scanf() : \u8df3\u8fc7\u76f8\u5e94\u7684\u8f93\u5165\u9879\u3002 1 2 3 4 int n ; printf ( \"Please enter three integers: \\n \" ); scanf ( \"%*d %*d %d\" , & n ); printf ( \"The last integer was %d \\n \" , n );","title":"(3). * \u4fee\u9970\u7b26"},{"location":"4/4.1/#2-io","text":"","title":"2. \u6587\u4ef6 IO"},{"location":"4/4.1/#1-fopen","text":"\u51fd\u6570\u539f\u578b\u4e3a FILE *fopen(const char *filename, const char *mode) mode of fopen() \"r\" \u8bfb\u6a21\u5f0f \"w\" \u5199\u6a21\u5f0f\uff0c\u628a\u73b0\u6709\u6587\u4ef6\u957f\u5ea6\u622a\u4e3a 0\uff0c\u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"a\" \u5199\u6a21\u5f0f\uff0c\u5728\u73b0\u6709\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u5185\u5bb9\uff0c\u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"r+\" \u8bfb\u5199\u6a21\u5f0f \"w+\" \u8bfb\u5199\u6a21\u5f0f\uff0c\u82e5\u6587\u4ef6\u5b58\u5728\u5219\u622a\u4e3a 0\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"a+\" \u8bfb\u5199\u6a21\u5f0f\uff0c\u5728\u672b\u5c3e\u6dfb\u52a0\u5185\u5bb9\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u521b\u5efa \"rb\", \"wb\", \"ab\", \"ab+\" \"a+b\", \"wb+\", \"w+b\" \"ab+\", \"a+b\" \u4e8c\u8fdb\u5236\u6a21\u5f0f \u2003 fopen() \u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488\uff0c\u5b83\u5e76\u4e0d\u6307\u5411\u5b9e\u9645\u7684\u6587\u4ef6\uff0c\u800c\u6307\u5411\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\uff0c\u5176\u4e2d\u5305\u542b\u64cd\u4f5c\u6587\u4ef6\u7684 IO \u51fd\u6570\u6240\u7528\u7684\u7f13\u51b2\u533a\u4fe1\u606f\u3002 \u2003\u5728\u6587\u4ef6\u64cd\u4f5c\u7ed3\u675f\u540e\uff0c\u901a\u8fc7 int fclose(FILE *fp) \u5173\u95ed\u6587\u4ef6\u3002\u5728\u8f83\u6b63\u5f0f\u7684\u7a0b\u5e8f\u4e2d\uff0c\u9700\u8981\u663e\u5f0f\u68c0\u67e5\u5176\u662f\u5426\u8c03\u7528\u5931\u8d25\uff0c\u78c1\u76d8\u5df2\u6ee1\u3001\u79fb\u52a8\u786c\u76d8\u88ab\u79fb\u9664\u548c IO \u9519\u8bef\u5747\u4f1a\u5bfc\u81f4\u8c03\u7528\u5931\u8d25\u3002","title":"(1). fopen()"},{"location":"4/4.1/#2-getcputc","text":"\u7c7b\u4f3c\u4e0e getchar() \u548c putchar() \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u9700\u8981\u6307\u660e\u6587\u4ef6\u3002 int getc(FILE *file) , int putc(int ch, FILE *file) getc() \u5728\u8bfb\u53d6\u65f6\u5982\u679c\u53d1\u73b0\u662f\u6587\u4ef6\u7ed3\u5c3e\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u7279\u6b8a\u503c EOF \u3002 1 2 3 while (( ch = getc ( fp )) != EOF ) { // determine the file is not empty putchar ( ch ); }","title":"(2). getc()\u3001putc()"},{"location":"4/4.1/#3-fprintffscanffgetsfputs","text":"int fscanf(FILE *stream, const char *format, ...) int fprintf(FILE *stream, const char *format, ...) \u4e0e scanf() \u548c printf() \u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u6587\u4ef6\u6307\u9488\u3002 char *fgets(char *buf, int count, FILE *file) \u6307\u5b9a\u5b58\u50a8\u4f4d\u7f6e\u548c\u5b57\u7b26\u4e32\u5927\u5c0f\uff0c\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6: \u6216\u8bfb\u53d6\u5230\u7b2c\u4e00\u4e2a\u6362\u884c\u7b26\u540e\u9762 (\u6362\u884c\u7b26\u4e5f\u88ab\u8bfb\u53d6)\uff0c\u6216\u8bfb\u5230\u6587\u4ef6\u7ed3\u5c3e\uff0c\u6216\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u8bfb\u53d6\u5b8c\u6210\u540e\uff0c\u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5b57\u7b26\u5e76\u5b58\u50a8\u5728 buf \u4e2d\u3002\u5728\u9047\u5230\u6587\u4ef6\u7ed3\u5c3e\u65f6\u8fd4\u56de NULL\u3002 int fputs(char *buf, FILE *file) \u628a\u5b57\u7b26\u6570\u7ec4\u4e2d\u7684\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u4e2d\u3002","title":"(3). fprintf()\u3001fscanf()\u3001fgets()\u3001fputs()"},{"location":"4/4.1/#4-fseekftellrewind","text":"int fseek(FILE *file, long offset, int origin) \u628a\u6587\u4ef6\u89c6\u4e3a\u5b57\u8282\u5e8f\u5217\uff0c\u79fb\u52a8\u6587\u4ef6\u5185\u7684\u6307\u9488\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u79fb\u52a8\u7684\u504f\u79fb\u91cf (\u53ef\u4ee5\u4e3a\u6b63\u3001\u8d1f\u30010)\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e3a\u8d77\u59cb\u70b9\uff0c\u6839\u636e ANSI \u6807\u51c6\uff0c\u5728 <stdio.h> \u5b9a\u4e49\u4e86\u51e0\u4e2a\u660e\u793a\u5e38\u91cf\uff1a mode of fseek() SEEK_SET \u6587\u4ef6\u5f00\u59cb SEEK_CUR \u5f53\u524d\u4f4d\u7f6e SEEK_END \u6587\u4ef6\u7ed3\u5c3e \u65e7\u7684\u5b9e\u73b0\u53ef\u80fd\u7f3a\u5c11\u8fd9\u4e9b\u5b9a\u4e49\uff0c\u6b64\u65f6\u7528 0L\u30011L\u30012L \u8868\u793a\u3002\u8c03\u7528\u6210\u529f\u51fd\u6570\u8fd4\u56de 0\uff0c\u51fa\u9519\u5219\u8fd4\u56de -1\u3002 ftell(FILE *file) \u8fd4\u56de\u6587\u4ef6\u5f53\u524d\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\uff0c\u5f53\u4ee5\u8ffd\u52a0\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u540e\uff0c\u672a\u8fdb\u884c\u4efb\u4f55 IO \u64cd\u4f5c\u524d\uff0c\u8fd9\u4e2a\u65f6\u523b\u7684\u5185\u90e8\u6307\u9488\u4ecd\u6307\u5411\u6587\u4ef6\u5934\u90e8\u3002 rewind(FILE *file) \u5c06\u6587\u4ef6\u5185\u90e8\u7684\u6307\u9488\u91cd\u65b0\u6307\u5411\u6587\u4ef6\u7684\u5f00\u5934\u3002","title":"(4). fseek()\u3001ftell()\u3001rewind()"},{"location":"4/4.1/#5-fflush","text":"int fflush(FILE *fp) C \u6807\u51c6\u5e93\u4e2d\u6240\u6709 IO \u90fd\u662f\u7f13\u51b2 IO \u3002\u6b64\u51fd\u6570\u628a\u8f93\u51fa\u7f13\u51b2\u533a\u6240\u6709\u672a\u5199\u5165\u5230\u6307\u5b9a\u6587\u4ef6\u7684\u6570\u636e\u5199\u5165\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u5237\u65b0\u7f13\u51b2\u533a\u3002\u5bf9\u8f93\u5165\u7f13\u51b2\u533a\u4f7f\u7528\u6b64\u51fd\u6570\u65f6\u672a\u5b9a\u4e49\u7684\uff1b\u4efb\u610f\u8bfb\u5199\u6a21\u5f0f\u4e0b\uff0c\u53ea\u8981\u6700\u8fd1\u4e00\u6b21\u64cd\u4f5c\u4e0d\u662f\u8f93\u5165\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u66f4\u65b0\u6d41\u3002","title":"(5). fflush()"},{"location":"4/4.1/#6-feofferror","text":"\u8bfb\u53d6\u5230\u6587\u4ef6\u7ed3\u5c3e\u6216\u8bfb\u53d6\u9519\u8bef\u65f6\uff0c\u6807\u51c6\u8f93\u5165\u51fd\u6570\u90fd\u4f1a\u8fd4\u56de EOF \uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u7528\u4e8e\u533a\u5206\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002 int feof(FILE *file) , \u2003 int ferror(FILE *file) \u5728\u4e0a\u4e00\u6b21\u8f93\u5165\u64cd\u4f5c\u68c0\u6d4b\u5230\u6587\u4ef6\u7ed3\u5c3e\u65f6\uff0c feof() \u8fd4\u56de\u4e00\u4e2a\u975e 0 \u503c\uff0c\u5426\u5219\u8fd4\u56de 0 \uff1b\u5f53\u8bfb\u6216\u5199\u9047\u5230\u9519\u8bef\uff0c ferror() \u8fd4\u56de\u975e 0 \uff0c\u5426\u5219\u8fd4\u56de 0 \u3002","title":"(6). feof()\u3001ferror()"}]}